<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>语法糖的博客</title>
  
  <subtitle>爱动漫，热爱LOL</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-19T07:24:33.968Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>chenye2017</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lamp 源码编译</title>
    <link href="http://yoursite.com/2018/01/19/lamp-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2018/01/19/lamp-源码编译/</id>
    <published>2018-01-19T07:21:41.000Z</published>
    <updated>2018-01-19T07:24:33.968Z</updated>
    
    <content type="html"><![CDATA[<p>lamp的源码编译安装。！！！注意哦，这里面是lamp，不是lnmp。之前的lamp中，apache和php的交流主要是apache把php作为自身的一个模块，而ngixn是通过cgi，php-fpm进行管理进程。所以lamp的编译安装是有顺序的，因为php在编译的过程中需要指定apache的apxs模块位置。<br><a id="more"></a></p><ol><li>apahce 的编译安装<br>apache2.4之后编译安装之前需要apr和apr-util的支持（这两个文件下载位置，百度，好像在apr.apache.org下面）apache在httpd.apache.org下面下载。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]#pwd</div><div class="line">/usr/local/src</div><div class="line">[root@localhost src]#tar xvf apr-1.6.2.tar.gz </div><div class="line">[root@localhost src]#tar xvf apr-util-1.6.0.tar.gz </div><div class="line">[root@localhost src]#tar xvf httpd-2.4.27.tar.bz2</div></pre></td></tr></table></figure></li></ol><p>编译安装 :<br>   1.进入解压目录，./configure 配置路径，百度吧 （–prefix==/usr/local/apr）<br>   2.make<br>   3.make install<br>   4.查看<br>安装apr-util之前得先安装apr</p><ol><li><p>安装额外的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]#yum install openssl-devel expat-devel pcre-devel</div></pre></td></tr></table></figure></li><li><p>编译httpd</p></li></ol><p>参考文章：<a href="http://blog.csdn.net/leshami/article/details/50144179" target="_blank" rel="external">centos7 源码编译httpd7</a><br>其实这一块都不用lamp中安装apache和单独安转apache没啥区别。</p><p>而且后来发现一个问题 apachectl start 这些用不了</p><p>httpd -k start 这戏好用</p><p>其实ps -efl|grep httpd ,也能看到这个httpd 的命令</p><p>mysql 编译安装<br>失败，用的yum安装（直接下载编译好的二进制码比较好，比如subline下载之后直接就能使用，不用安装，这些java写的东西啊，好用，但是mysql不行，即使是编译过的二进制码，还要执行一些脚本）</p><p>php编译安装</p><ol><li>php.net 上下载源文件</li><li>安装额外的包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install libxml2-devel bzip2-devel libmcrypt-devel</div></pre></td></tr></table></figure></li></ol><p>3.编译安装php7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@localhost php-7.1.10]#./configure \</div><div class="line">&gt; --prefix=/app/php \</div><div class="line">&gt; --enable-mysqlnd \</div><div class="line">&gt; --with-mysqli=mysqlnd \</div><div class="line">&gt; --with-openssl \</div><div class="line">&gt; --with-pdo-mysql=mysqlnd \</div><div class="line">&gt; --enable-mbstring \</div><div class="line">&gt; --with-freetype-dir \</div><div class="line">&gt; --with-jpeg-dir \</div><div class="line">&gt; --with-png-dir \</div><div class="line">&gt; --with-zlib \</div><div class="line">&gt; --with-libxml-dir=/usr \</div><div class="line">&gt; --enable-xml \</div><div class="line">&gt; --enable-sockets \</div><div class="line">&gt; --with-apxs2=/app/httpd24/bin/apxs \</div><div class="line">&gt; --with-mcrypt \</div><div class="line">&gt; --with-config-file-path=/etc \</div><div class="line">&gt; --with-config-file-scan-dir=/etc/php.d \</div><div class="line">&gt; --enable-maintainer-zts \</div><div class="line">&gt; --disable-fileinfo</div><div class="line"></div><div class="line"></div><div class="line"># 进行编译安装</div><div class="line">[root@localhost php-7.1.10]#make -j 2 &amp;&amp; make install</div></pre></td></tr></table></figure></p><p>注意那个with-apxs2 的选项<br>下面那个 make -j 2 指的是用两个cpu进行编译</p><p>注意这时候时没有配置文件的，到解压的php文件夹下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost php-7.1.10]#cp php.ini-production /etc/php.ini</div></pre></td></tr></table></figure></p><p>编译php7的时候with-config-file-path 指定了配置文件的位置</p><ol><li>这时候在apache的根目录下访问phpinfo这种文件还是不幸的，需要支持对php的mime类型解析，修改httpd的配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AddType application/x-httpd-php .php</div></pre></td></tr></table></figure></li></ol><p>5.测试phpinfo</p><p>6.测试数据库连接</p><p>之前测试测试数据库总的出错···总结了下原因</p><ol><li>不能清楚的认识到mysql怎么连接数据库的。其实换一种思路，php是怎么连接redis的，我们安装好redis服务，然后安装php的redis扩展，就可以了。什么连接函数啊和连接mysql是一样的。关于php连接mysql，现在主推两种方式，mysqli和pdo，分别对应两种扩展，具体的可以参考<a href="http://www.runoob.com/php/php-mysql-connect.html" target="_blank" rel="external">菜鸟教程里面的这个php连接mysql</a>。</li><li>mysqli() 第一个参数’localhost’ 和’127.0.0.1’ 的区别，localhost 连接基于socket，这个文件的位置在php.ini有指定，如果换了位置，则找不到。127.0.0.1基于tcp，就可以啦，不用那个文件，参考链接<a href="https://segmentfault.com/q/1010000000328531" target="_blank" rel="external">segmentfault</a><br>mysql 这个status挺好用的哈哈<img src="http://ozys8fka7.bkt.clouddn.com/mysql-status.jpg" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;lamp的源码编译安装。！！！注意哦，这里面是lamp，不是lnmp。之前的lamp中，apache和php的交流主要是apache把php作为自身的一个模块，而ngixn是通过cgi，php-fpm进行管理进程。所以lamp的编译安装是有顺序的，因为php在编译的过程中需要指定apache的apxs模块位置。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux lamp 环境" scheme="http://yoursite.com/tags/Linux-lamp-%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>lnmp yum安装</title>
    <link href="http://yoursite.com/2018/01/19/lnmp-yum%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/01/19/lnmp-yum安装/</id>
    <published>2018-01-19T07:21:24.000Z</published>
    <updated>2018-01-19T07:23:29.376Z</updated>
    
    <content type="html"><![CDATA[<p>关于lnmp环境的yum安装。作为一个phper，肯定得熟悉。之前写过关于在windows下php环境的搭建··咳咳咳，其实那根本算是搭建，像xampp都是把环境搭配好了，自己只是做了配置虚拟主机，然后运行框架。<br>框架在我的理解中本身除了yaf之类的安装，主流的框架tp，yii，laravel更像是一个文件夹，代码的集合体，这个文件夹中各个子文件夹联系紧密，成为一个整体。当外来请求通过lamp进入到入口文件，路由进入到控制器，模型层，数据库，变成一个有用的数据返回出来，再通过lamp返回给浏览器，上面的流程就很容易发现，简单的像apache,nginx里面的配置文件定义，只是让外来请求找到这个入口文件，进入到入口文件里面之后就靠框架的路由寻找具体的控制器了。<br>lamp环境方便的让外来请求比如对于index.php的请求，如果是直接在linux中，我么需要php (编译器) 可能还需要 -c指定配置文件的位置 文件.php,这样。但是如果是lamp，我们可以通过浏览器直接访问这个php文件。<br><a id="more"></a></p><ol><li>首先是yum源的安装，更新。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</div><div class="line">[root@localhost ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div><div class="line">[root@localhost ~]# rpm -Uvh  http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</div></pre></td></tr></table></figure><p>先说这个mysql yum安装，现在要通过这个社区版。</p><p>然后剩下两个是为了安装第三方软件用的。这个epel以后可能经常用到，虽然没lamp好像只要这个webtatic就可以了。之前添加源的时候看过一篇文章，好像是说最好不要和官方源里面有内容冲突。这个epel很合适，大家都在用，当然自己也就用咯。</p><ol><li>yum安装nginx，mysql，php<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# yum -y install nginx</div><div class="line">[root@localhost ~]# yum -y install mysql-community-server</div><div class="line">[root@localhost ~]# yum -y install php70w-devel php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64  php70w-pdo.x86_64   php70w-mysqlnd  php70w-fpm php70w-opcache php70w-pecl-redis php70w-pecl-mongo</div></pre></td></tr></table></figure></li></ol><p>其实这里面比如php7安装的那几个我也不懂，据说把70w改成71w就能装7.1版本了。</p><p>3.yum安装的一个好处是通过systemctl enable 能控制软件的开机启动 关闭，通过systemctl status 能看软件的状态，启动，关闭。默认安装的mysql没有密码，可以直接登录进去。据说要配置默认编码，utf8，但我好像没有配置，它自动就是utf8。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vim /etc/my.cnf</div><div class="line">[mysqld]</div><div class="line">character_set_server=utf8</div><div class="line">init_connect=&apos;SET NAMES utf8&apos;</div><div class="line">[root@localhost ~]# systemctl restart mysqld    # 重启 MySQL</div></pre></td></tr></table></figure></p><ol><li>nginx的配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">location / &#123;</div><div class="line">    #定义首页索引文件的名称</div><div class="line">    index index.php index.html index.htm;   </div><div class="line">&#125;</div><div class="line"></div><div class="line"># PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</div><div class="line">location ~ .php$ &#123;</div><div class="line">    fastcgi_pass 127.0.0.1:9000;</div><div class="line">    fastcgi_index index.php;</div><div class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">    include fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>注意这块document root的位置，要卸载location外面，我之前写在上面那个location里面，下面那个location获取不到。</p><p>重启nginx，重启php-fpm.</p><ol><li>测试是否成功。<br>在nginx根目录下 &lt;?php echo phpinfo();die;</li></ol><p>看能不能输出php信息咯。其实还可以检测下和mysql的连接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于lnmp环境的yum安装。作为一个phper，肯定得熟悉。之前写过关于在windows下php环境的搭建··咳咳咳，其实那根本算是搭建，像xampp都是把环境搭配好了，自己只是做了配置虚拟主机，然后运行框架。&lt;br&gt;框架在我的理解中本身除了yaf之类的安装，主流的框架tp，yii，laravel更像是一个文件夹，代码的集合体，这个文件夹中各个子文件夹联系紧密，成为一个整体。当外来请求通过lamp进入到入口文件，路由进入到控制器，模型层，数据库，变成一个有用的数据返回出来，再通过lamp返回给浏览器，上面的流程就很容易发现，简单的像apache,nginx里面的配置文件定义，只是让外来请求找到这个入口文件，进入到入口文件里面之后就靠框架的路由寻找具体的控制器了。&lt;br&gt;lamp环境方便的让外来请求比如对于index.php的请求，如果是直接在linux中，我么需要php (编译器) 可能还需要 -c指定配置文件的位置 文件.php,这样。但是如果是lamp，我们可以通过浏览器直接访问这个php文件。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux lnmp 环境" scheme="http://yoursite.com/tags/Linux-lnmp-%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>php安装扩展</title>
    <link href="http://yoursite.com/2018/01/18/php%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2018/01/18/php安装扩展/</id>
    <published>2018-01-18T10:35:02.000Z</published>
    <updated>2018-01-18T10:36:55.914Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写文章了，今天来说一下关于php的扩展，虽然自己理解的不是很深，也没有仔细去研究，只是把平时工作中遇到的情况，解决途径写下来，还有很多不足的地方，以后去补充<br><a id="more"></a></p><p>php的扩展大部分都是c编写的，php -m 可以列出我们php中安装的扩展<br><img src="http://upload-images.jianshu.io/upload_images/5525740-a0582293f271520d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>其中swoole就是现在很火的php扩展。以这个为例子<br>Linux下安装</p><ol><li>获取tar.gz压缩包（可以去github上直接下载，或者去pecl（php 扩展库里面搜索））。</li><li>解压缩  tar xvf </li><li>进入解压缩目录（如果进入解压缩目录内部文件是so结尾的，不是.c 之类的结尾的，不用进行后面的操作）</li><li>phpize  (这个命令在php的安装目录下，bin目录下，和php命令在一个目录下)</li><li>./configure 生成配置文件，之前安装swoole的时候需要指定php-config,这可不是php的配置文件，也是一个命令，和上面的php，phpize在同一个bin目录下，如果想看更多参数可以 –help,</li><li>make</li><li>make install (安装失败make clean，重新再来呗)<br>8.生成的so文件自动放到了/usr/local/php/lib/php/extensions/no-debug-zts-20160303，然后在php.ini 文件里面加上一句extension = swoole.so就可以了</li></ol><p>windows下安装</p><ol><li>大部分都是xampp的这种集成环境，首先去pecl上下载dll文件，··像swoole我是没找到windows下的扩展文件，需要根据php版本 vc版本 TS Windows版本（windows一般是x86 和64，操作系统位数） 来选择 扩展文件的版本</li><li>解压后，把dll文件放到php的扩展目录下ext下面，然后在php.ini里面加上zend_exten```= 这个扩展文件名。就可以了</li></ol><p>之前安装redis扩展的时候，···当时用的是xampp，··然后安装好了redis扩展，可是使用不了。坑爹啊，window下我都没安装redis，光安装redis扩展有什么用，····其实这个扩展知识为了让php能操作redis，像apache，在编译安装php7的时候，也要指定apache的apxs之类的位置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有写文章了，今天来说一下关于php的扩展，虽然自己理解的不是很深，也没有仔细去研究，只是把平时工作中遇到的情况，解决途径写下来，还有很多不足的地方，以后去补充&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP Linux 扩展" scheme="http://yoursite.com/tags/PHP-Linux-%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux常见问题</title>
    <link href="http://yoursite.com/2018/01/09/Linux%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/09/Linux常见问题/</id>
    <published>2018-01-08T16:17:31.000Z</published>
    <updated>2018-01-18T10:47:28.333Z</updated>
    
    <content type="html"><![CDATA[<p>因为linux平时用的不是很频繁，所以经常会遇见一些问题，然后很容易忘记，然后还经常遇到，所以记录下来。</p><p>目录：</p><ol><li>yum源替换</li><li>修改密码</li><li>locate 查找文件</li><li>添加环境变量</li></ol><a id="more"></a><p>1.yum源的替换<br>我们每次安装centos的时候，如果不是打包安装，是从新安装的话，为了安装软件速度快点，我们通常会替换yum源，把国外的镜像替换成国内的yum源镜像。常用的有163，阿里云啊。<br>首先我们进入 /etc/yum.repos.d 文件夹下面，查看repo文件，把centos-base 这个yum源文件改名，作为备份文件（mv,剪贴，又能当做重命名来用，注意不是复制哦）。然后wget，国内的yum源地址，yum clean all 清除缓存，yum makecache 在本地生成源的软件信息，方便软件的查找。<br>总结：</p><ol><li>cd /etc/yum.repos.d  进入目录</li><li>mv centos-base.repo centos-base.repo.bak  备份文件</li><li>wget -nc <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="external">http://mirrors.aliyun.com/repo/Centos-7.repo</a>   下载原文</li><li>yum clean all  清除缓存</li><li>yum makecache  生成缓存</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*   阿里yum源:[http://mirrors.aliyun.com/repo/](http://mirrors.aliyun.com/repo/)</div><div class="line">*   163(网易)yum源: [http://mirrors.163.com/.help/](http://mirrors.163.com/.help/)</div><div class="line">*   中科大的Linux安装镜像源：[http://centos.ustc.edu.cn/](http://centos.ustc.edu.cn/)</div><div class="line">*   搜狐的Linux安装镜像源：[http://mirrors.sohu.com/](http://mirrors.sohu.com/)</div><div class="line">*   北京首都在线科技：[http://mirrors.yun-idc.com/](http://mirrors.yun-idc.com/)</div></pre></td></tr></table></figure><p>2.修改密码<br>passwd 用户名 root用户，非root用户只能修改自己的密码哦，所以passwd后面不能加参数</p><p>3.locate查找文件</p><p>locate 命令的使用<br>之前一直使用find / -name 文件名，太慢了，使用locate吧。<br>首先yum install mlocate,然后updatedb ,就可以使用locate 文件名称。每次使用前locate 文件名称。</p><p>4.添加环境变量</p><p>lamp环境如果通过源码编译安装，安装的位置一般是/usr/local,命令一般在/usr/local/软件/bin/命令，每次使用起来这么一大串，是在麻烦，加入环境变量效果棒棒的</p><ol><li>echo $PAHT 查看环境变量</li><li>vim ~/.bashrc </li><li>export PATH=路径：$PATH:</li><li>source .bashrc 直接生效（不知道这里为啥不是~/.bashrc）</li><li>echo $PATH 查看是否生效</li></ol><p>​     </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为linux平时用的不是很频繁，所以经常会遇见一些问题，然后很容易忘记，然后还经常遇到，所以记录下来。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;yum源替换&lt;/li&gt;
&lt;li&gt;修改密码&lt;/li&gt;
&lt;li&gt;locate 查找文件&lt;/li&gt;
&lt;li&gt;添加环境变量&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux 常见问题" scheme="http://yoursite.com/tags/Linux-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>svn Git 思考</title>
    <link href="http://yoursite.com/2017/12/20/svn-Git-%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/12/20/svn-Git-思考/</id>
    <published>2017-12-20T13:41:18.000Z</published>
    <updated>2017-12-20T14:09:05.043Z</updated>
    
    <content type="html"><![CDATA[<p>···今天碰到一个问题，其实这个问题好久之前就没碰到了，只是之前可以通过别的方式化解，然后今天没法通过别的方式解决了，只能通过正确的方式解决。</p><p>问题描述：在线上修改了代码，怎么更新到本地。</p><a id="more"></a><p>直接通过小乌龟update，肯定不行。因为小乌龟是直接从svn服务器上更新内容，然而我是线上的代码修改了，而不是svn服务器上的文件修改了。</p><p>之前我们这个小项目提交代码到线上是这样的，本地修改后，用小乌龟提交，然后连接到服务器上，切换到网站根目录下，svn up，这样线上就能正常访问了。正是这个过程导致了我一个误区，我以为svn的工作流程是这样。</p><p><img src="http://ozys8fka7.bkt.clouddn.com/svn%E6%B5%81%E7%A8%8B%EF%BC%88%E9%94%99%E8%AF%AF%EF%BC%89.png" alt="svn错误流程"></p><p>但其实他应该是这样</p><p><img src="http://ozys8fka7.bkt.clouddn.com/svnl%E6%B5%81%E7%A8%8B%EF%BC%88%E6%96%B0%EF%BC%89.png" alt="svn正确流程"></p><p>其实线上网站根目录下文件夹也是svn客户端服务的内容，他只是svn服务器大脑下的一个分支</p><p>之前的错误概念还有就是把线上服务器的内容等同于svn大脑的内容。举个例子，在实际的大项目中，代码整理后，要经过测试环境等等多重步骤才能发布，放到正常的生产环境中，如果我们直接把大脑合并的内容放到生产环境中，这样是太不合理了，这样感觉会导致线上的代码太不稳定了。</p><p>所以，正如第二个图中看到的一样，网站根目录也是从线上代码往下拉的，所以我们对线上代码的提交，就应该和我们平时提交代码一样，只是我们平时用小乌龟习惯了，可能已经忘记命令了，还有svn up是svn update的缩写，这个up并不是提交的意思哦（···误导我一年了）。</p><p>所以，我们在线上svn commit（svn ci）缩写，必备参数 -m(我原先以为svn不需要，肯定是小乌龟做了处理)。这样就能把代码更新到svn服务器上，然后别的同事svn up就可以了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;···今天碰到一个问题，其实这个问题好久之前就没碰到了，只是之前可以通过别的方式化解，然后今天没法通过别的方式解决了，只能通过正确的方式解决。&lt;/p&gt;
&lt;p&gt;问题描述：在线上修改了代码，怎么更新到本地。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="svn git 版本控制" scheme="http://yoursite.com/tags/svn-git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git使用教程</title>
    <link href="http://yoursite.com/2017/12/15/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/12/15/Git使用教程/</id>
    <published>2017-12-14T16:14:16.000Z</published>
    <updated>2017-12-16T07:00:38.311Z</updated>
    
    <content type="html"><![CDATA[<p>感觉有必要写一篇关于git的使用教程，其实像我现在根本用不到git，平时公司用的是svn，然后还是一个人做项目，对于版本控制工具那些处理冲突，回退基本用不到，对于修bug开新的分支，也是没有那个需求，因为一般的bug都比较简单，而且也没那么急。</p><p>之所以用git，主要还是因为github吧，上面优秀的代码太多了，（其实是不会写，主要用来下插件）关于git的教程有很多，本身基本的用法也不是很难，写这个文章主要是为了记录我平常的一些基本操作，因为有些东西不用了，就忘记了，然后重新查找，坑爹的Google，每次查找相同的东西总出来不同的结果，坑爹啊，又得重新看一遍，不如自己总结下。</p><p>因为自己平时不用git，所以对git很多用法理解的不是很深，只是为了基本的日常写下了这篇文章。</p><p>主要参考来源：廖雪峰的git教程 : <a href="https://www.liaoxuefeng.com" target="_blank" rel="external">https://www.liaoxuefeng.com</a></p><a id="more"></a><p>先来介绍一下市面上主要的两款版本控制工具svn和git，两者有什么差别呢，svn学名叫集中式版本控制工具，git叫分布式版本控制工具，我对他们之间的区别看待就是：git的操作步骤比svn要长，git在svn后面还有一步操作。svn必须联网才能操作，git没有网也能进行操作，这是一个很重要的点，想象一下，如果你在没网的环境下开发（这个可能概率不大，但感觉作家写作有很大可能）不能用用于提交，当你有网的时候才可以提交的时候，也许你的文章已经写了很多了，这个时候再提交，不管是版本回退，还是这次的修改量都会很巨大，就相当于我们在编程的时候写了一个很大的主函数，以后维护起来会很困难。（刚刚有看到了一点，因为我们公司的服务器就在我旁边，我们在同一个局域网内，所以不管是更新还是下载都会很快，但要是贵阳，云南那些朋友，更新代码，怪不得经常嫌弃慢，有时候还外网访问出问题，这样就更新不了代码了，gg，心疼二帅大周末要来公司修复网络）但是git却可以，git可以让你在没网的情况下进行提交，只是没有提交到远程服务器上，当你有网的时候再推送到服务器上，这很方便，感觉就是没有网的svn，git的冲突处理是出现在把代码远程push到代码仓库的这个联网阶段。<br>为什么会出现这种情况呢，为什么svn叫集中式，而git叫分布式呢，我的理解就是svn的版本库在远程服务器上，其实git也在远程服务器上，只是他在本机也copy了一个版本库，所以可以理解成每个电脑都是一个版本库，所以有很多的版本库，所以git叫分布式版本控制系统。<br>所以对于集中式版本控制系统，中央大脑坏了，版本控制工具就不能用，但是分布式中央大脑其实只是用来进行差异化的合并，他坏了，版本控制的功能还是能使用的。这其实是和断网是同一个场景，网断了，不能连接主大脑，svn不能使用，git还是能使用的。<br>在说git之前推荐款git的可视化工具，小乌龟，不只是git，svn也有，很简单的配置加上点点点，就可以了（以前的我一直把小乌龟当做git和svn··坑爹啊，因为平时一直用小乌龟提交代码嘛，所以就把这个当做版本控制工具了，其实他是版本控制工具之上的可视化管理工具，有svn版，也有git版）<br>算了，还是先介绍我平时用的比较多的东西吧<br>1.首先呢，我是因为github才开始使用git的，git的安装直接百度就可以了，下载好git软件（感觉这是git客户端）<br>2.下载好，然后和所有的windows软件一样，安装好后会生成一个git文件夹，里面有gitbash，这是个很方便的cmd工具哦，相比较window的dos，他支持很多linux的命令，cd啊，ll啊，特别是ssh，window是不支持的，（好像是git是基于ssh的，所以也支持ssh远程连接的啦）<br>3.然后呢，在github上点击创建个项目，之后下面会出现这个项目地址啊，等等，我一般只是旺这个项目里面塞代码嘛，这个的传输的过程需要ssh的配合，通过命令生成ssh秘钥，把公钥贴在github上，这样就可以支持传输喽（生成的ssh秘钥在该用户.ssh文件下面）<br>4.执行命令把远程仓库和本地的关联起来，分支什么的，在github上创建好仓库下面会有提示。<br>5.去到本地项目下面，git init 初始化一个git仓库，然后git add <em> 把该项目下面所有文件添加进去，然后git commit -m  “”  git的提交好像必须得附加信息，最后push（如果用小乌龟，点点点就可以了，其实也是这个三步，只是小乌龟的add好像得单个文件一一添加，反正第一次添加用git add </em> ,后面再添加多个文件的数量的时候数量也不会很多，没什么关系）</p><p>我大致用的东西大概就这么多，其实在工作的过程中（针对我的svn使用经历，其实开个分支修bug，版本回退还是很重要的，只是因为我平时git用的比较少，所以很容易忘记现在）</p><p>下面的内容是看书得来的：<br>git的好处（或者说是版本控制工具的好处）：感觉两点最能体验：1.协同合作同一个文件的时候，对同一个文件的修改，如何合并多个人员的异同。<br>2.对于文件修改的历史，特别是基于同一个文件不同的差异较大的修改方向的时候，后来以什么文件为标准，怎么回退到以前的版本，怎么标识每次修改内容。</p><p>上述如果通过手动，那将是多么痛苦的过程。</p><p>番外：这两天安装composer啊，git都会提到brew，其实这是mac的一个包管理工具，感觉就像yam一样（安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="external">http://brew.sh/</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure><p>这个好像没有什么实际的作用，–global 代表所有的仓库都用这个，还可以给不同的仓库指定不同的name和邮箱。</p><p>git init  把一个文件夹变成git仓库，会发现该目录下多了一个.git 文件。</p><p>git只能记录纯文本文件的修改（因为文本是有编码格式的，还是用utf-8吧，通用啊）<br>对于word，图片这种二进制文件，只能记录大小的变化，并不能知道文件哪块修改了，还有不要用记事本（window自带的那个东西写，会出现很多奇怪的东西，我现在系统好像默认的编辑器是subline）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add file1.txt</div><div class="line">$ git add file2.txt file3.txt</div><div class="line">$ git commit -m &quot;add 3 files.&quot;</div></pre></td></tr></table></figure><p>小结</p><p>现在总结一下今天学的两点内容：<br>初始化一个Git仓库，使用git init命令。<br>添加文件到Git仓库，分两步：<br>第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；<br>第二步，使用命令git commit，完成。</file></p><p>git status 查看仓库当前状态，不管是没有add的，还是add之后没有commit的（相比较于小乌龟这种，修改之后如果之前add过，后面就不用再add了，但是命令行却还要，廖雪峰说因为add可以一次性加很多文件内容，commit只能一次····，所以才会分成两步） 都能通过git status看见，git diff 发现文章的不同（+代表新加的内容， - 代表减少的内容，一条语句的修改可以看做是先删除这个语句，再加上这个语句）</p><p>当工作目录是干净的时候，就代表没有东西被修改了。</p><p>git log  查看git 提交的历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit 3628164fb26d48395383f8f31179f24e0882e1e0</div><div class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</div><div class="line">Date:   Tue Aug 20 15:11:49 2013 +0800</div><div class="line"></div><div class="line">    append GPL</div><div class="line"></div><div class="line">commit ea34578d5496d7dd233c827ed32a8cd576c5ee85</div><div class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</div><div class="line">Date:   Tue Aug 20 14:53:12 2013 +0800</div><div class="line"></div><div class="line">    add distributed</div><div class="line"></div><div class="line">commit cb926e7ea50ad11b8f9e909c05226233bf755030</div><div class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</div><div class="line">Date:   Mon Aug 19 17:51:55 2013 +0800</div><div class="line"></div><div class="line">    wrote a readme file</div></pre></td></tr></table></figure><p>最近一次提交是 信息是 append GPL<br>commit后面的id代表的是对这次提交的标记，记得以前用docker的时候对容器的标识也是用这样一大串很长的数字。</p><p>git reset –hard HEAD^ 回退一个版本<br> git reset –hard 3628164 会退到版本号是3628164···这个版本</p><p>版本回退很快，是因为git的版本控制通过的是指针指向的不同。</p><p>git reflog 记录每次操作，比如你回退了某个版本，现在后悔了，cmd也关闭了，可以通过git reflog找到版本号，这里面记录了你的每次操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Changes not staged for commit:</div><div class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line">#</div><div class="line">#       modified:   readme.txt</div><div class="line">#</div><div class="line"># Untracked files:</div><div class="line">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line">#</div><div class="line">#       LICENSE</div></pre></td></tr></table></figure><p>没有加入仓库的文件是untracked,修改了未添加是not stage，都得git add</p><p>工作区：我们的工作目录。<br>暂存区： add文件进来<br>分支：git init的时候自动创建的，commit的内容都是天价到这个分支上来。</p><p>git的每次修改，如果不add到暂存区，commit的时候就不会提交。<br>可以做一个实验：先修改一个文件-&gt;git add-&gt;再修改-&gt;git commit 查看会发现第二次修改没有提交。</p><p>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时（git add），想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时(git commit)，想要撤销本次提交，不过前提是没有推送到远程库,git reset –hard HEAD^。</p><p>感觉现在学习git，不想想着远程仓库推送的那个环节，那个环节其实就是合并冲突用的，和版本控制无关，git commit之后就会产生版本号。</p><p>删除版本库里面的软件：<br>一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit。（和给版本库添加文件类似）。</p><p>在github上创建一个远程仓库，然后本地关联，这个教程太多太多，百度知道上都有，就不写了。</p><p>关联远程仓库：<br>git remote add origin git@github.com:michaelliao/learngit.git （orgin是远程仓库的名称）</p><p>git push -u origin master  关联本地master分支和远程master分支（之后的推送就只要git push origin master）</p><p>我平时都是使用git的流程都是现在本地剑豪文件夹，然后推送到远程。</p><p>还有种是在从远程clone文件，创建仓库的时候勾选初始化，会新建一个md文件，然后git clone</p><p>git支持多种协议，除了ssh，还有https，但ssh更快，除非一些公司不开放ssh端口，那只有用ssh了（注意前面名称还是git）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉有必要写一篇关于git的使用教程，其实像我现在根本用不到git，平时公司用的是svn，然后还是一个人做项目，对于版本控制工具那些处理冲突，回退基本用不到，对于修bug开新的分支，也是没有那个需求，因为一般的bug都比较简单，而且也没那么急。&lt;/p&gt;
&lt;p&gt;之所以用git，主要还是因为github吧，上面优秀的代码太多了，（其实是不会写，主要用来下插件）关于git的教程有很多，本身基本的用法也不是很难，写这个文章主要是为了记录我平常的一些基本操作，因为有些东西不用了，就忘记了，然后重新查找，坑爹的Google，每次查找相同的东西总出来不同的结果，坑爹啊，又得重新看一遍，不如自己总结下。&lt;/p&gt;
&lt;p&gt;因为自己平时不用git，所以对git很多用法理解的不是很深，只是为了基本的日常写下了这篇文章。&lt;/p&gt;
&lt;p&gt;主要参考来源：廖雪峰的git教程 : &lt;a href=&quot;https://www.liaoxuefeng.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.liaoxuefeng.com&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="版本控制工具 Git" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7-Git/"/>
    
  </entry>
  
  <entry>
    <title>vagrant使用</title>
    <link href="http://yoursite.com/2017/12/13/vagrant%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/12/13/vagrant使用/</id>
    <published>2017-12-13T13:55:52.000Z</published>
    <updated>2017-12-13T15:55:11.048Z</updated>
    
    <content type="html"><![CDATA[<p>使用vagrant的原因？</p><p>其实主要是因为来公司的时候用的这个东西，相比于传统的xampp这种window下的一体化工具，vagrant其实是在vitrual box 之上的一种管理工具，他是基于虚拟机的，所以你可以在虚拟机上干的事他都能干。</p><p>首先xampp是window平台下的，他的lamp这个l不具备，所以，你xampp永远都接触不到linux，但是vagrant不同，他是基于虚拟机的，虚拟机可以装linux，所以使用vagrant，你可以使用linux。</p><p>使用vagrant首先得加载镜像，这个镜像就相当于最原始的环境，他是个box文件，想象一下，如果这个镜像是你们生产环境的打包，那你是不是就不用做别的处理就可以直接使用了，节省了新人安装环境的成本。</p><a id="more"></a><p>其实vagrant 构建开发环境分为两大部分，第一部分是加载镜像，这主要和box有关，</p><p>so,先来介绍几个关于vagrant box 的相关命令</p><p>vagrant box add (镜像名自定义)  文件路径 （建议下载到本地，vagrant cloud 上面的文件下载很慢）</p><p>vagrant box  add（命名空间/文件名） 其实这样也是可以的，只是很慢</p><p>这样下载的文件放在了windows 用户 目录下面的 .vagrant 下面的box文件里面</p><p>这个可以修改的 setx VAGRANT_HOME = “”   路径名 /M 就可以了,/M代表整个系统都修改了</p><p>set 环境变量名 这样得到环境变量的值</p><p>set 环境变量=  这样是删除环境变量</p><p>vagrant box remove （box名称） 这样是删除box文件</p><p>vagrant box list 展示有哪些box文件</p><p>这样把远端或者是本地的box文件加载到系统中，如果是下载的.box文件就可以删除啦</p><p>镜像加载完成啦，接下来干嘛呢，就是在这个镜像的基础上构建虚拟环境，我们得用到vagrant的相关命令。</p><p>然后呢，新建个文件夹，建议vitrual，代表虚拟环境，再在下面新建单个项目的文件夹，这样的好处是vagrant虚拟环境不容易到处都有</p><p>进入对应文件夹</p><p>vagrant init （add的box文件名） 初始化，会生成vagrant  file 文件，修改其中的</p><p>config.vm.box = “new_itbasic”  这个代表box的名称</p><p> config.vm.network “private_network”, ip: “192.168.33.10”  私有网络只能自己通讯，相当于虚拟机里面的桥接，不能和局域网中的别的电脑通信（这个ip地址有要求吗）</p><p>public 相当于net，可以和局域网中其他通信，记得得是局域网中同一个网段哦</p><p>  config.vm.synced_folder “D:\code\yaf_api”, “/home/itbasic” 设置共享文件夹，配置文件中这上面是两个<code>\\</code>应该是为了转义</p><p>  config.vm.boot_timeout = 100<br>  config.ssh.username = “root”<br>  config.ssh.password = “root”</p><p>这个是为了直接可以远程连接虚拟机</p><p>配置好后，vagrant up 第一次好像都是用这个，重新加载配置文件了，其实点开vitrual box，会发现自动创建个虚拟机，然后</p><p>不用的时候挂起 vagrant suspend，再启动 vagrant resume</p><p>vagrant halt 是关闭，vagrant reload 重新加载配置文件</p><p>vagrant status 查看虚拟机状态</p><p>vagrant destroy 摧毁虚拟机镜像，这个是保存位置是第三个位置了，这个是由vitrual box决定的，在vitrual box的全局设定里面。</p><p>总结一下：vagrant构建环境其实一共有4个文件夹的位置</p><ol><li>vagrant box的文件位置，box add镜像之后，.box文件就可以不要了（如果以后要用，可以直接打包生成）</li><li>vagrant 的虚拟环境，生成vagrant file 配置文件的目录</li><li>基于box生成的供vitrual box 使用的镜像存储目录</li><li>共享文件夹目录（用于写代码的目录）</li></ol><p>上面的1，3两个大文件默认都是在c盘，坑爹啊，结果我的c盘越来越小</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用vagrant的原因？&lt;/p&gt;
&lt;p&gt;其实主要是因为来公司的时候用的这个东西，相比于传统的xampp这种window下的一体化工具，vagrant其实是在vitrual box 之上的一种管理工具，他是基于虚拟机的，所以你可以在虚拟机上干的事他都能干。&lt;/p&gt;
&lt;p&gt;首先xampp是window平台下的，他的lamp这个l不具备，所以，你xampp永远都接触不到linux，但是vagrant不同，他是基于虚拟机的，虚拟机可以装linux，所以使用vagrant，你可以使用linux。&lt;/p&gt;
&lt;p&gt;使用vagrant首先得加载镜像，这个镜像就相当于最原始的环境，他是个box文件，想象一下，如果这个镜像是你们生产环境的打包，那你是不是就不用做别的处理就可以直接使用了，节省了新人安装环境的成本。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Linux vagrant 虚拟环境" scheme="http://yoursite.com/tags/Linux-vagrant-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>https通信原理</title>
    <link href="http://yoursite.com/2017/12/02/https%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/12/02/https通信原理/</id>
    <published>2017-12-02T09:01:31.000Z</published>
    <updated>2017-12-02T09:03:55.290Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://segmentfault.com/a/1190000012196642" target="_blank" rel="external">https://segmentfault.com/a/1190000012196642</a><br>作为一个web开发者，对于https和http肯定要有所了解，现在的我对于深层次的https通信看着还不是太懂，但是对于https和http的差别，记得有一次去中科招商的时候面试有问到过。写这篇文章的时候，主要是方便自己看的时候理解。</p><a id="more"></a><p>首先呢 https默认端口号是443，http是80，都知道http相比于http更加安全。但是安全主要在什么方面呢，http通过明文传输，post方式好像看不见，但是get方式可以通过在服务器上监听这个端口，就能看见甚至都不要解密传进来的数据。像之前的talent，远程连接（默认端口23），因为传输过程明文，而且远程连接主要就是用来远程登录，肯定要输入用户名和密码，so，通过对这个端口的监听，就能知道用户通过talent服务的这个端口传进来的用户名和密码，这个安全性的要求不言而喻，所以现在都不用了，现在用ssh。还记得每次连接服务器的时候，让你接受公钥的弹窗嘛，这是为了在传输过程中用服务器的公钥进行加密，然后数据到达服务器端，服务器可以通过私钥进行解密。之前看过一个很形象的比喻。公钥就相当于锁，私钥就相当于钥匙，我这个东西用锁锁起来了，当然就可以用钥匙打开了（这是公钥加密，私钥解密的比喻）</p><p>https和http都是基于tcp/ip 协议，属于应用层，他们其实是一样的，只是https外层有个ssl包裹起来<img src="http://ozys8fka7.bkt.clouddn.com/1336318852-5a1d155b41475_articlex.png" alt=""></p><p>其实本质上还是属于http协议。</p><p>https在传输过程中使用了加密，有对称加密和非对称加密。</p><p>对称加密就是在加密和加密过程中使用同一个密钥，但是这样有个不安全点就是，密钥需要进行传递，传递过程中，如果密钥被捕获了，那加密如同虚设，so，就产生了我们的非对称加密</p><p>我所接触的非对称加密有ssh加密，这个因为不管是github上开始代码的提交，还是我们开始远程建立数据库的连接，都要用到。记得我第一次给github提交代码的时候，因为window默认不支持ssh，所以下载了git客户端，在gitbash上进行操作，生成了ssh密钥，把公钥贴在了github的setting里面。（非对称加密算法好像有个叫RSA）。</p><p>因为非对称加密有些复杂，https通信过程中,注意是通信过程中，不用非对称加密，用的还是对称加密，因为我们只要保证通信过程中对称加密的密钥不被窃取捕获篡改，就可以了。所以我们在传输密钥的过程用的是非对称加密，这样就得需要服务器的公钥，我们用服务器的公钥加密我们传输数据石宏对称加密的密钥，然后传输到服务器端，服务器用他的私钥进行解密，这样密钥传输成功，我们进行通行的过程中就可以用对称加密了。</p><p>那问题来了，服务器怎么传输过来他的公钥呢，怎么保证他传输过来的公钥的安全性呢，用对称加密？不行，无法保证密钥的准确，用非对称加密，也不行，这就陷入无限的死循环中了。</p><p>其实非对称加密不仅可以用公钥加密，私钥解密，保证传输数据的数据不被获取（需要私钥解密，可是私钥是私密的东西哦，别人都不知道）到，但不能保证数据不被劫持篡改（但无法保证别人对你这个文件进行修改），还可以使用私钥加密，公钥解密，这样不能保证数据不被获取到，但是可以保证数据不被篡改（因为每个人都可能获取到公钥，然后用公钥解密你这个私钥解密的文件，但无法修改，因为一旦修改了，文件的内容和私钥加密的内容就不一样了，等到客户端接收到服务器端传过来的内容，用公钥解密后，发现内容不一样，就很容易判断到文件被修改，如果一样，则能保证传输过来文件的准确性（我对不能同时修改文件和私钥加密文件的看法是私钥是服务器所特有的，所以不能还原修改文件被私钥加密后的样子））</p><ul><li>首先，CA会向申请者颁发一个证书，这个证书里面的内容有：签发者、证书用途、服务器申请的时候附带的公钥、服务器的加密算法、使用的HASH算法、证书到期的时间等等。</li><li>紧接着，把上面所提到的内容，做一次HASH求值，得到一个HASH值。</li><li>再接着，用CA的私钥进行加密，这样就完成了数字签名。而用CA的私钥加密后，就生成了类似人体指纹的签名，任何篡改证书的尝试，都会被数字签名发现。</li><li>最后，把数字签名，附在数字证书的末尾，传输给服务器</li></ul><p>因为这个传输服务器公钥的过程就是为了保证数据的不被篡改，不用管数据是否被窃取到，因为传输的是服务器的公钥，本身就是公开的，所以我们用私钥进行加密，公钥进行解密。</p><ul><li>客户端拿到这个数字证书以后，用CA私钥对应的公钥，可以解密数字证书末尾的数字签名，得到证书的内容以及原始的HASH值。</li><li>紧接着，客户端按照证书中的HASH算法，对证书的内容求HASH值。如果通过CA公钥解密的HASH和通过计算求得的HASH值相同，那么认证通过，否则失败。</li><li>如果认证通过，就可以取得服务器的公开密钥。</li></ul><p>所以对服务器公钥的传递本质上还是通过费对称加密算法，只是找了个中间机构ca，多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥。这样，就方便客户端对于数字证书真实性的验证。</p><p>客户端证书<br>HTTPS中不仅可以使用服务器证书，还可以使用客户端证书。以客户端证书进行客户端认证，它的作用与服务器证书是相同的。<br>由于客户端获取证书需要用户自行安装客户端证书，同时也面临着费用的问题。<br>因此，现状是，安全性极高的认证机构可办法客户端证书但是仅用于特殊用途的业务。比如那些可支撑客户端证书支出费用的业务。<br>例如，银行的网上银行就采用了客户端证书。在登录网银时不仅要求用户确认输入ID和密码，还会要求用户的客户端证书，以确认用户是否从特定的终端访问网银。</p><p>总结一下：</p><ol><li>首先服务器端让ca用他的私钥对自己的公钥进行加密，然后传给客户端，客户端用ca的公钥进行解密，保证接收到服务器端公钥的准确性。</li><li>然后客户端用服务器端公钥对自己传输过程中数据进行对称加密的密钥进行加密，传输给服务器端，因为只有服务器端有私钥，所以只能服务器能解密，保证数据传输过程中密钥的安全性。</li><li>最后客户端通过对称加密的密钥给自己传输的数据进行加密，传输给服务器端，服务端用之前客户端传输过来的密钥进行对称结密，完成通信。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://segmentfault.com/a/1190000012196642&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000012196642&lt;/a&gt;&lt;br&gt;作为一个web开发者，对于https和http肯定要有所了解，现在的我对于深层次的https通信看着还不是太懂，但是对于https和http的差别，记得有一次去中科招商的时候面试有问到过。写这篇文章的时候，主要是方便自己看的时候理解。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络 https" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C-https/"/>
    
  </entry>
  
  <entry>
    <title>工具分享</title>
    <link href="http://yoursite.com/2017/11/29/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2017/11/29/工具分享/</id>
    <published>2017-11-29T15:06:18.000Z</published>
    <updated>2017-12-13T13:55:15.326Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客的目的就是把自己平时用的比较顺手，方便能提升效率的工具分享给大家，互相交流，提升工作效率</p><ol><li><p>Evernote 一款记笔记的工具，之所以用这个，是因为刚开始编程的时候，有一次记笔记，当时用的还是word，然后没保存，然后····大家都懂得，记得那时写了挺久的关于php的笔记，不知道你们有没有相同的感觉，即使再看一遍书，很容易把笔记都能写回来，但是心里还是很难受，于是就开始用这款印象笔记了，不知道没网能不能用，···因为我一直在有网的情况下使用，然后他可以最多三个终端上使用（免费版），还有就是会有冲突的，记得冲突的时候及时查看，然后修改就好了，不要像我一样攒着很多（听说有道云也挺不错，但是没有用过）</p></li><li><p>简书  我用他主要是因为他上面写文章（编辑器可以调整成md）可以一边写，一遍预览</p></li><li><p>七牛云 主要用来做图床（写md的时候用的啦）</p></li><li><p>phpstorm  真的好好用（下面的terminal，还有新建文件能自动git添加等等）</p><p>可以快速打开文件，不用在项目中找（ctrl+alt+n）</p><p>本文搜索 ctrl + f</p><p>全局搜索 ctrl + shift +f </p><p>回退 ctrl + alt + 左方向键</p><p>大段注释 ctrl +shift + /</p><p>alt + 上下键  上下方法切换</p><p>alt + 左右键 左右tab页切换</p><p>本行注释  不太记得了</p><p>应该还有很多，但不太记得了（创建文件自动添加命名空间）</p><p>面板上的类的结构</p></li><li><p>百度云，现在的百度云下载速度受限制了，只有开通会员才会下载速度贼猛，百度干净云帮你解决疑难杂症， 链接: <a href="https://pan.baidu.com/s/1dFzqZK1" target="_blank" rel="external">https://pan.baidu.com/s/1dFzqZK1</a> 密码: cjrr，直接下载是个安装好的文件包，点击baiduyunguanjia.exe,，然后就当做普通的百度云用就好了，速度能到4 5m，··当然这和你本身的网速也有关（记得点击召唤大神提速）</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇博客的目的就是把自己平时用的比较顺手，方便能提升效率的工具分享给大家，互相交流，提升工作效率&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Evernote 一款记笔记的工具，之所以用这个，是因为刚开始编程的时候，有一次记笔记，当时用的还是word，然后没保存，然后····大家都懂得
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结</title>
    <link href="http://yoursite.com/2017/11/28/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/11/28/Linux常用命令总结/</id>
    <published>2017-11-27T17:20:28.000Z</published>
    <updated>2017-11-29T15:35:25.319Z</updated>
    
    <content type="html"><![CDATA[<ol><li>netstat -an 展示所有的端口号，-a 表示包括tcp和utp，-n表示不用域名代替ip地址</li><li>ll -a ls-la  展示该目录下所有文件包括隐藏文件</li><li>cd  进入目录</li><li>pwd 展示路径</li><li>mkdir  创建目录</li><li>chmod -R (文件夹)  755 修改权限</li><li>chown root:root 文件名 修改文件所有者和组</li><li>chgrp  修改组</li><li>useradd  添加用户</li><li>passwd 修改密码  （切换到当前用户下就可以修改了哦，不知道怎么修改别的用户的）</li><li>groupadd 添加组 </li><li>touch 新建文件</li><li>echo 11 &gt;&gt; 文件名 把这个内容输出到文件中</li><li>vim  i 修改模式 ：wq 保存  ：q 退出不保存 ：q！强制退出  /  查找  ：num 多少行  ：$末尾  </li><li>cat  查看</li><li>​</li></ol><p>常用端口号 ：http 80 https 443</p><p>mysql  3306</p><p>redis 忘记了</p><p>ssh 22</p><p>~代表家目录，root用户 /root,普通用户/home/用户名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;netstat -an 展示所有的端口号，-a 表示包括tcp和utp，-n表示不用域名代替ip地址&lt;/li&gt;
&lt;li&gt;ll -a ls-la  展示该目录下所有文件包括隐藏文件&lt;/li&gt;
&lt;li&gt;cd  进入目录&lt;/li&gt;
&lt;li&gt;pwd 展示路径&lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux网络管理</title>
    <link href="http://yoursite.com/2017/11/28/Linux%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/28/Linux网络管理/</id>
    <published>2017-11-27T17:17:16.000Z</published>
    <updated>2017-12-02T09:02:21.535Z</updated>
    
    <content type="html"><![CDATA[<p>首先来介绍下有关网络的相关知识吧，iso，国际标准化组织  制定了 osi七层模型，但这个模型在现实生活中并没有使用，使用的是基于7层模型之上的tcp/ip 4层模型</p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image2.png" alt="OSI七层模型"><br><a id="more"></a></p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image.png" alt="tcp/ip四层模型"><br><img src="http://ozys8fka7.bkt.clouddn.com/Image1.png" alt="二者对应关系"></p><p>二者区别<br><img src="http://ozys8fka7.bkt.clouddn.com/Image6.png" alt=""></p><p>上三层是给用户提供服务的，下四层是数据传输用的（数据不传输的下4层不用了，但上3层还是要用的）</p><p>既然是数据传输，那必然就有单位，每一层传输的单位是不一样的，osi7层模型上都有标识，最底层的物理层单位比特，代表的就是0或者1这个单位<br>这些层在水平上的传输，然我们以为他们就是直接想通的，其实他们是从高到低，再从低到高这样传输的。</p><p>各个层的作用，感觉了解一些就可以了<br>1.物理层：底层传输<br>2.数据链路层：通过不同的mac地址，通过交换机进行传输，此时还没有ip地址，so交换机肯定是不认识ip地址的啦<br>3.网络层：ip地址，路由器，通过对不同路由器的选择，去寻找不同的主机服务器<br>4.传输层：tcp udp的定义，tcp安全可靠没有udp快，但udp不可靠，还有来确定端口号（端口号的理解，这封信送给你家，只有署名了，才知道给你家的某个人，外来的请求，只有确定了端口号，你才知道这个请求是给哪个服务的）<br>5.会话层：这个文件是直接存储呢，还是要进行网络传输呢<br>6.表示层：数据的表现形式，加密啊，我们window上文件的高级属性也能加密，但是秘钥保存在本机应该是c盘，一旦重装系统，秘钥丢失，那这个文件也可能就打不开了<br>7.应用层：用户接口</p><p>线面这张图能表名上面的作用<br><img src="http://ozys8fka7.bkt.clouddn.com/Image5.png" alt=""></p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image3.png" alt="tcp的三次握手"><br>a: 你在吗？<br>b:我在，你还在吗？<br>a：我还在，我穿输了<br><img src="http://ozys8fka7.bkt.clouddn.com/Image4.png" alt="两军问题"></p><p>其实这个应答应该是没完没了的，但3次之后准确率就比较高了</p><p>下面介绍一下ip有关内容<br><img src="http://ozys8fka7.bkt.clouddn.com/Image7.png" alt=""><br>ipv4结构如上所示，图中可以看出选项有的有，有的没有，所以结构不唯一，需要检测，没有ipv6固定，速度快</p><p>可以看出32次方，一共2的32次方个<br>默认 0.0.0.0 到255.255.255.255<br>其实如下，很多不给用的，就a b c类能用，其中还包括一些私有的，只有局域网内网才能用<br><img src="http://ozys8fka7.bkt.clouddn.com/Image8.png" alt=""><br>127这个网段只有一个也就是自己<br>127.0.0.1</p><p>上面的ip地址第一个字段代表不同的网段，不同的网段需要通信，要用路由器</p><p>a类网段，拥有的主机数是 2的24次方<br>b类：前两个数代表不同网段，后面两个数代表不同的主机<br>c类：前三个数代表不同网段，后面1个数代表不同的主机<br>同一个网段交换只要交换机就可以了<br>这个网段是怎么决定的呢，是有子网掩码决定的，子网掩码的255代表网段，0代表主机，ip地址都是配合子网掩码使用的，没写是因为有默认</p><p>最大的主机数（-2 一个是网络地址，一个是广播地址）</p><p>私有ip不要钱，有效的保护公网ip不够用</p><p>缺点：不能访问公网ip，公网ip也不能访问私网ip（公网ip是互联网上唯一的门牌号）</p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image9.png" alt=""></p><p>网络的计算：ip地址和子网掩码和，因为子网掩码前面全是1，所以网络地址网段和ip地址一样，后面子网掩码全是0，所以网络地址主机是0</p><p>广播地址怎么算呢，子网掩码有多少位是0，就换算多少位1，前面网段不变，这样就是广播地址</p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image10.png" alt="tcp"><br><img src="http://ozys8fka7.bkt.clouddn.com/Image11.png" alt="udp"><br>udp 比tcp简单，所以udp比tcp块</p><p>常见端口号<br>http 80 https 443<br>mysql 3306<br>ssh 2222<br>redis 忘记了<br>smtp 25(简单邮件传输协议)</p><p>不管是window还是linux都禁止了23端口，因为telnet是明文传输，截获了都不用破解</p><p>DNS 进行域名解析</p><p> 虽然我们的端口分tcp和udp，但是系统怕我们弄混淆了，不管tcp的20 21还是udp的20 21都是分配给ftp使用的</p><p>DNS（尽然既可以接受tcp协议也可以接受udp协议）</p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image12.png" alt="nestat -an"><br>listening 表示本机正在监听</p><p>establish 表示建立连接</p><p>udp的状态为空，因为udp不管你在不在，都会给你发送数据</p><p>（我想攻击一个游戏服务器，我把我所有的外部连接都关掉，然后登陆游戏，然后netstat 查看外部连接，就能知道对方的ip地址了）</p><p>关于DNS的知识</p><p>ip地址太难记，没有域名形象，so 产生了DNS</p><p>window的host文件是做静态ip和域名对应，优先于DNS匹配，so我们经常本地测试绑定虚拟域名的时候都是这么干的</p><p>早期就是通过host文件这么解析的，坏处<br><img src="http://ozys8fka7.bkt.clouddn.com/Image13.png" alt=""></p><p>dns原理<br><img src="http://ozys8fka7.bkt.clouddn.com/Image14.png" alt=""></p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image15.png" alt=""></p><p>域名解析原来是从后往前的，··顶级域名在后面</p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image16.png" alt=""><br><img src="http://ozys8fka7.bkt.clouddn.com/Image17.png" alt=""><br>原先有个.me 的国家域名可以申请</p><p>这个是全球唯一的（比如www.sina.com 和www.sina.cn就是两个域名，为了防止别人误入错误的地址，大公司会把那些顶级域名都注册了，以免坏人的误导）</p><p>三级+二级+顶级+组成完整的域名</p><p>根域名管理一级域名，一级域名管理二级域名，二级域名管理三级域名，这种层层管理</p><p>dns一般劫持被误导非常难，你只要确保imooc.com 这个二级域名是否是这个网站的，就能确保是否是钓鱼网站（确保二级域和顶级域一致）</p><p>域名解析过程<br>主要分为开始的递归查询和后面的迭代查询<br><img src="http://ozys8fka7.bkt.clouddn.com/Image20.png" alt=""><br>默认本地域名服务器解析的域名保留3天</p><p>（这种分级的更有利管理）</p><p><img src="http://ozys8fka7.bkt.clouddn.com/Image21.png" alt=""><br>迭代查询允许返回一个最优的值，比如顶级域名不知道，让本地域名服务器去找cn解析</p><p>全球所有的域名服务器都知道13台根域名服务器</p><p>但是递归查询不可以，递归要么返回一个准确值，要么返回错误</p><p>所以，递归查询一般用作客户机和本地域名服务器之间进行查找（注意这个查找虽然图中只是一台，其实会有很多台）<br>而迭代查询一般用在根dns和cn，com这些之间进行查找</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先来介绍下有关网络的相关知识吧，iso，国际标准化组织  制定了 osi七层模型，但这个模型在现实生活中并没有使用，使用的是基于7层模型之上的tcp/ip 4层模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ozys8fka7.bkt.clouddn.com/Image2.png&quot; alt=&quot;OSI七层模型&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="网络 Linux" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C-Linux/"/>
    
  </entry>
  
  <entry>
    <title>window下运行各种框架总结</title>
    <link href="http://yoursite.com/2017/11/25/window%E4%B8%8B%E8%BF%90%E8%A1%8C%E5%90%84%E7%A7%8D%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/11/25/window下运行各种框架总结/</id>
    <published>2017-11-25T09:53:43.000Z</published>
    <updated>2017-12-02T09:04:32.201Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是<strong>对于php运行环境的搭建中运行起来框架的总结，其实运行框架，不管是yii，还是tp，还是laravel，还是我们那个项目框架，与其说是运行起来，不如</strong>说是找到框架的入口文件<strong>，然后剩下的就直接交给了框架进行处理（route.php的处理，restful api等等，通过解析模块，控制器，方法），绝大部分时候就这这么简单，至少上面三个都不用对apache</strong>进行特殊的配置（目前的这篇文章只是单纯的针对Apache）。</p><a id="more"></a><p>so，简化的思考了一下，就是找public下面的index.php 文件（tp  laravel都是这个文件 yii是在web目录下，其实找一下就行了，大部分都是reqire项目的核心库这种东西。例如yii</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">// comment out the following two lines when deployed to production</div><div class="line">defined(&apos;YII_DEBUG&apos;) or define(&apos;YII_DEBUG&apos;, true);</div><div class="line">defined(&apos;YII_ENV&apos;) or define(&apos;YII_ENV&apos;, &apos;dev&apos;);</div><div class="line"></div><div class="line">require(__DIR__ . &apos;/../vendor/autoload.php&apos;);</div><div class="line">require(__DIR__ . &apos;/../vendor/yiisoft/yii2/Yii.php&apos;);</div><div class="line"></div><div class="line">$config = require(__DIR__ . &apos;/../config/web.php&apos;);</div><div class="line"></div><div class="line">(new yii\web\Application($config))-&gt;run();</div></pre></td></tr></table></figure><p>），所以只要配置好了一个环境，剩下的框架的运行基本就一样了。<br>上面已经说了我们这片文章的目的了，运行起来框架，通过的是直接下载代码的这种方式（现在绝大部分框架都是支持composer来安装）。我们先安装好xampp，xampp会帮我们集成安装好apache和mysql，他们和在linux下是一样的，至少我到现在还没有发现什么不同，so，因为太过相似了，导致我从前以为xampp是在window环境下集成安装了lamp这种，其实这个l（linux是没有的），他的环境准确说是wamp（我代表 window这种架构）。他把php，mysql还有apache都放在了他自己也就是xampp的安装目录下，我们找到apache的安装目录，在conf文件夹里面找到（httpd-vhosts.conf）这个配置虚拟域名的文件，我记得以前apache配置虚拟域名是在一块的，都是写在httpd.conf文件里面，现在分开了，其实是包含了conf文件下的所有文件，但这样更清楚。<br>接下来我们就开始配置虚拟主机了（配置虚拟主机的意思就是在一个服务器上配置多域名访问的站点，其实不通过域名通过端口号啊什么的都可以，本质上就是把不同的请求分发到不同的目录下。我们的itbasic就是通过Nginx通过域名的不同把对80端口不同的域名请求分发到不同的端口下，然后通过apache虚拟主机的配置（通过的是端口的不同）来达到发送到不同目录下）。<br>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:800&gt;</div><div class="line">    ##ServerAdmin webmaster@dummy-host2.example.com</div><div class="line">    ##DocumentRoot &quot;D:/xampp/htdocs/dummy-host2.example.com&quot;</div><div class="line">    ##ServerName dummy-host2.example.com</div><div class="line">    ##ErrorLog &quot;logs/dummy-host2.example.com-error.log&quot;</div><div class="line">    ##CustomLog &quot;logs/dummy-host2.example.com-access.log&quot; common</div><div class="line">     DocumentRoot &quot;D:\code\laravel-v5.1.11\laravel-v5.1.11\public&quot;  </div><div class="line">    ServerName laravel.app  </div><div class="line">        &lt;Directory &quot;D:\code\laravel-v5.1.11\laravel-v5.1.11\public&quot;&gt;  </div><div class="line">            Options Indexes FollowSymLinks Includes ExecCGI  </div><div class="line">            AllowOverride All  </div><div class="line">            Require all granted  </div><div class="line">        &lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p><p>简单的记录下apache的语法 DocumentRoot 代表根目录<br>配置虚拟域名要写在virtualHost标签之间，后面的代表端口号，servername代表域名，directory里面allow代表接受任何的请求，之前安装larave的时候代开index.php嫌弃我权限不够，其实是这个directory标签的内容写错了，注意这个如果说打开文件夹没有权限，在window下你改这个目录的什么所有者权限啊什么都是没用的，我的理解是web请求的时候打开这个文件夹的用户不是我们能预测的，应该是other什么的，因为加了这句话，所以我们在window下安装这些框架不用修改日志文件，要么在linux下安装yii，laravel都要修改log日志文件夹的权限（感觉是因为写日志的操作是来自http的请求，像我们之前安装seaslog第三方的日志的时候，也得修改那个文件夹的权限，道理是一样的）<br>（yii框架的话conf文件夹下web.php cookiekey要随便填一个数，）</p><p>当然还要配置个虚拟域名，因为之前apache里面填写的域名如果是假的话，在本地host文件里面配置一下（因为浏览器解析是通过缓存（贼端）host文件，dns解析来找的，配置之后ping一下能不能同，就可以啦）</p><p>大功告成。</p><p>总结一下,本机运行起来一个框架。</p><p>1.安装集成环境（xampp）<br>2.修改apache配置文件，配置虚拟主机<br>3.修改host文件，修改域名到本机127.0.0.1</p><p>注意的点：<br>1.配置虚拟主机之后，xampp原先那个localhost直接就访问不了了，所以把那个localhost也配置一个虚拟主机（localhost也属于一个域名）<br>2.如果访问不了，先ping一下域名，看是否能ping通，然后查看apache的access日志和error日志，如果没有，确认http服务是否起起来了，如果有查看日志（linux下tail -f 动态看），window下在文件的最下面，像我现在这个window下环境，就是因为端口号被占了，改成800，所以每次访问域名后面都得加 ： 800，这个Apache的错误日志里面会记录的很清楚</p><p>附上三张框架图<br>1.<img src="http://ozys8fka7.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720171125172354.png" alt="laravel"><br>2.<img src="http://ozys8fka7.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720171125172431.png" alt="yii2"></p><p>(其实在用外链的时候想到了树洞外链，GitHub上一个关于php的开源项目)<br>对了突然想起来yaf框架，其实因为yaf框架是需要扩展模块支持，所以得先安装php扩展（php扩展大部分都是c开发的，），然后原理是一样的（只是yaf框架需要手动生成基本目录）</p><p><a href="http://blog.csdn.net/underclound/article/details/76835318" target="_blank" rel="external">地址</a></p><p>简单记录下window下安装php扩展（phpinfo能输出php的详细信息，在框架的index.php目录下是唯一所有人都能访问的）然后去pecl下载php扩展，下载dll文件的时候要注意那个什么tc之类的，注意好，下载好放在php的扩展目录下ext，再在php.ini 里面模仿之前的php扩展，加上相应的话就好了，那个扩展还是可以配置一些属性的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zend_extension = D:\xampp\php\ext\php_xdebug-2.5.4-7.0-vc14.dll</div></pre></td></tr></table></figure></p><p>像mysql这种，都是可以添加配置信息的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[MSSQL]</div><div class="line">mssql.allow_persistent=On</div><div class="line">mssql.max_persistent=-1</div><div class="line">mssql.max_links=-1</div><div class="line">mssql.min_error_severity=10</div><div class="line">mssql.min_message_severity=10</div><div class="line">mssql.compatability_mode=Off</div><div class="line">mssql.secure_connection=Off</div></pre></td></tr></table></figure></p><p>yaf好像不配置，不能再生产环境下用，有个参数，其实安装seaslog的时候那些日志模板啊，日志格式啊都是在这里配置的，就是初始化的感觉。linux下的安装扩展要先下载文件，然后编译成so文件放在对应目录下，然后配置php.ini，有机会再说。window下只要注意好下载对应的dll文件就可以了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是&lt;strong&gt;对于php运行环境的搭建中运行起来框架的总结，其实运行框架，不管是yii，还是tp，还是laravel，还是我们那个项目框架，与其说是运行起来，不如&lt;/strong&gt;说是找到框架的入口文件&lt;strong&gt;，然后剩下的就直接交给了框架进行处理（route.php的处理，restful api等等，通过解析模块，控制器，方法），绝大部分时候就这这么简单，至少上面三个都不用对apache&lt;/strong&gt;进行特殊的配置（目前的这篇文章只是单纯的针对Apache）。&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="linux apache 框架 php" scheme="http://yoursite.com/tags/linux-apache-%E6%A1%86%E6%9E%B6-php/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用</title>
    <link href="http://yoursite.com/2017/11/25/hexo%E5%B8%B8%E7%94%A8/"/>
    <id>http://yoursite.com/2017/11/25/hexo常用/</id>
    <published>2017-11-25T09:47:21.000Z</published>
    <updated>2017-12-02T09:26:58.096Z</updated>
    
    <content type="html"><![CDATA[<p>感觉七牛云和我们公司的产品datrix做的东西是一样的，都是用来做存储的，还有树洞外链（GitHub上一个php star很高的项目）</p><p>hexo server -port 4000 启动服务器，因为我改了端口，导致得换端口</p><p><code>hexo new “文章名称”</code>产生新的文章，注意这个地方一定要是双引号，单引号会出错</p><p>hexo  g 产生静态文件</p><p>hexo c  清理缓存</p><p>hexo d 部署到github上 （这个其实就是代码提交，以前很傻比，每次提交代码都用git，其实这个就是把一些静态文件代码git到GitHub上，只是封装了一些操作而已）</p><p>注意经常写好了，命名没问题，但是本地测试显示不出来，其实有时候是type那个save快捷键的问题，手动点击保存</p><p>还有经常显示不出来都是语法啊什么问题（md语法），不要总怀疑缓存，服务器，注意下md语法和是否保存好了，刷新就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感觉七牛云和我们公司的产品datrix做的东西是一样的，都是用来做存储的，还有树洞外链（GitHub上一个php star很高的项目）&lt;/p&gt;
&lt;p&gt;hexo server -port 4000 启动服务器，因为我改了端口，导致得换端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo 
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo datrix 七牛云 存储" scheme="http://yoursite.com/tags/hexo-datrix-%E4%B8%83%E7%89%9B%E4%BA%91-%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法使用记录</title>
    <link href="http://yoursite.com/2017/11/16/markdown%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/16/markdown语法使用记录/</id>
    <published>2017-11-15T16:07:55.000Z</published>
    <updated>2017-12-02T09:03:17.367Z</updated>
    
    <content type="html"><![CDATA[<ol><li>关于段落，不用使用 <code>&lt;p&gt;</code> 直接使用换行</li><li>关于首行缩进中文两字符 <code>&amp;emsp</code> 后面加上 ; 代表缩进一个，因为这个; 如果直接写在&amp;emsp 后面会直接不显示，所以我分开来写</li><li>如果是英文字符，肯定就是 <code>&amp;nbsp</code> 啦</li><li><code>*** ***</code> 两个星号之间的内容是加粗, <code>** **</code> 代表泄题</li><li>`` 两个点好之间代表标记，比如我这上面想显示的md标记都是放在标签里面显示出来</li><li>有序列表的话 <code>1.</code> 空格后会自动生成列表，以后想生成下一个列表，自动换行就可以了，不用一个个手敲（这个markdown语法都是空格后好像才能生效）</li><li><code>``` </code> 代表下面的内容是代码块，结束也是 ```</li><li><code>[]()</code> 插入超链接，中括号里面是要显示的文本内容， <code>！[]()</code>插入图片，[]也是文本内容</li><li><code>&lt;!--more--&gt;</code>nexo 产生阅读全文的按钮</li><li><code>*</code>代表无序列表，（小圆点图标）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;关于段落，不用使用 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 直接使用换行&lt;/li&gt;
&lt;li&gt;关于首行缩进中文两字符 &lt;code&gt;&amp;amp;emsp&lt;/code&gt; 后面加上 ; 代表缩进一个，因为这个; 如果直接写在&amp;amp;emsp 后面会直接不显示，所以
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown 语法 文档 工具" scheme="http://yoursite.com/tags/markdown-%E8%AF%AD%E6%B3%95-%E6%96%87%E6%A1%A3-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>写博客的原因</title>
    <link href="http://yoursite.com/2017/11/15/%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2017/11/15/写博客的原因/</id>
    <published>2017-11-15T15:36:12.000Z</published>
    <updated>2017-11-15T16:06:47.709Z</updated>
    
    <content type="html"><![CDATA[<p>  之前学习hexo建站的原因很简单，一个朋友弄过，当第一次见得时候很好奇，好像是被h5那个背景图所吸引，还有一点就是相比于wordpress他更大方，更感觉是现代化的产物。随着进一步的了解，相比于wordpress他不用主机，对于我这种穷人来说就更有好啦，哈哈哈，而且还能在GitHub上混commit。</p><p>  但当我建出这个小站的时候，我却发现不知道写什么，难道纯粹是为了面试的时候简历上有个博客地址博取好感，感觉仅仅因为这个去经常写些文章花费太大，有些人说生活笔记，关于笔记我用的Evernote，这个随时随地都能同步，没有必要非得用这个。</p><p>  但不久之后我发现在学习的过程中我虽然记了很多的笔记，但我从来没有去总结，<strong>我的总结都是通过第二次第三次第四次去再次碰到这个问题</strong>，再去解决，而学会的这个问题，所以我觉得我这种记笔记的方法从根本上说并不是记笔记，而是自我安慰，所以<strong>我想通过写博客总结我写过的笔记，进行进一步的加工，还有列出关键的点，这样还能方便平时自己对问题的快速查找，这是我写博客的初衷，当然分享也是其中一点，希望如果有朋友能看见，能指出我的不足，或者我写的东西很方便的帮你找到了答案，这也是我最希望看到的</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  之前学习hexo建站的原因很简单，一个朋友弄过，当第一次见得时候很好奇，好像是被h5那个背景图所吸引，还有一点就是相比于wordpress他更大方，更感觉是现代化的产物。随着进一步的了解，相比于wordpress他不用主机，对于我这种穷人来说就更有好啦，哈哈哈，而且还能
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="编程 职业 生活" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B-%E8%81%8C%E4%B8%9A-%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/25/hello-world/"/>
    <id>http://yoursite.com/2017/10/25/hello-world/</id>
    <published>2017-10-25T01:00:25.950Z</published>
    <updated>2017-10-25T01:00:25.950Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
