<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>语法糖的博客</title>
  
  <subtitle>爱动漫，热爱LOL</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-21T15:28:27.580Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>chenye2017</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>框架学习0</title>
    <link href="http://yoursite.com/2018/05/21/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A00/"/>
    <id>http://yoursite.com/2018/05/21/框架学习0/</id>
    <published>2018-05-21T15:17:51.000Z</published>
    <updated>2018-05-21T15:28:27.580Z</updated>
    
    <content type="html"><![CDATA[<p>想了下，还是把框架的基础知识也记录下来。</p><a id="more"></a><p>首先我们需要认识到框架也是一个脚本，不要因为现代的框架都是oop而忽略了面向过程。框架的入口文件其实可以看做框架的处理文件，就是一个php文件，只是因为框架把对于问题的处理发送到内部的面向对象库中去了，所以我们才会忽略框架本身的面向过程，这就经常会让小伙伴不知道比如记录用户的访问信息，如果不写在登录接口中应该写在哪呢。</p><p>框架中对于常量的定义，对于辅助函数的定义（没有用命名空间，类似原生php函数的使用）我们经常只是在框架定义好的文件中添加，但忽略了为什么在这个地方写就能这样使用，其实本质上都是因为在入口文件出有include 这个文件才会这样。</p><p>一般入口文件只写一些文件加载，像返回数据的处理之类的一般写在route之中，我们那个bbs写在了入口文件中，添加返回头信息啊之类的，感觉也还行。对于异常的捕获处理一般也写在最外层的入口文件处，这样很暴力，这样每当我们有错误的时候想立刻终止可以通过马上抛出异常，而不用执行到脚本的末尾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想了下，还是把框架的基础知识也记录下来。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>框架学习1</title>
    <link href="http://yoursite.com/2018/05/21/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A01/"/>
    <id>http://yoursite.com/2018/05/21/框架学习1/</id>
    <published>2018-05-21T14:38:24.000Z</published>
    <updated>2018-05-21T15:17:38.327Z</updated>
    
    <content type="html"><![CDATA[<p>对于框架源码的学习，可以帮助我们以后快速学习一个框架的使用，虽然同样的效果同样可以使用多学习几个框架，比如你把tp学完你学习laravel和yii发现很多时候都是一样的，但这仅限于你对框架的使用，增删改查的使用，当你想去修改一个框架的时候（不包括把框架中常量提取出来放在一个文件中，给框架增加一个validate等等这种情况）而是类似于把框架原来的隐式路由改成显式路由这种情况，如果你没有动手搭建过框架，你会不知所措。</p><p>我们这里对于框架的搭建还不是从头到尾写一个框架这种情况，composer（php的包管理工具，类似前端的npm），我们可以像拼接乐高积木那样搭建一个框架，那用什么来充当积木间的凹槽呢，我觉得命名空间可以充当凹槽之一。</p><a id="more"></a><p>命名空间在我的理解中就是把项目代码看做一个文件夹，然后名称是/,然后下面的各个文件夹名称就是命名空间，为了区分不同文件夹下的相同文件夹名称，我们需要把文件夹名称的路径记录下来。如果我的文件放在文件夹中的目录结构比较深，那么外层的文件夹名称是否可以不要呢，答案是肯定的，我觉得这也是文件夹相对于使用路径的好处之一。</p><p>上文说到了composer，我们要怎么使用这个工具呢。在项目的根目录下（注意不是网站的根目录下，网站的根目录往往是入口文件的根目录）执行composer install，linux下需要时php composer.phar install,他会找composer.json文件，第一次可能没有，我们可以通过composer require xxx/xxxx 来安装一个依赖，这时候会多出composer.json , composer.lock, vendor 目录，我们在入口文件出只需要include  vendor/autoload.php, 就能使用vendor中的依赖了。我们项目中自定义的文件夹也可以通过composer 的autoload来实现自动加载。php的psr-4和psr-0都有对命名空间的规定，但是0废弃了，现在大家都是用4，比较下0和4，比如 \controller\test.php,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace controller;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//psr-0</div><div class="line">&#123;</div><div class="line">  &apos;autoload&apos; : &#123;</div><div class="line">  &apos;controller//&apos; : &apos;&apos;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">//psr-4</div><div class="line">&#123;</div><div class="line">  &apos;autoload&apos; : &#123;</div><div class="line">  &apos;controller//&apos; : &apos;controller&apos;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>psr-0会把规定的路径再拼上命名空间当做相对路径去文件夹下找，而psr-4会直接把规定的路径当做命名空间去寻找，上面的例子只是针对简单的一层命名空间，还是看不出什么效果，多层的更容易看出0是多么的脑残。</p><p>还有当注册了controller文件夹，controller的子文件夹的命名空间默认注册。</p><p>我们在修改命名空间的时候只需要修改composer.json文件就可以了，对于composer的具体怎么加载的其实不用管的，他应用这么广泛，一般不会出现什么问题。</p><p>todo:</p><p>use 的时候命名空间顶层不用加\,但是new的时候如果顶层写要加\，不是十分理解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于框架源码的学习，可以帮助我们以后快速学习一个框架的使用，虽然同样的效果同样可以使用多学习几个框架，比如你把tp学完你学习laravel和yii发现很多时候都是一样的，但这仅限于你对框架的使用，增删改查的使用，当你想去修改一个框架的时候（不包括把框架中常量提取出来放在一个文件中，给框架增加一个validate等等这种情况）而是类似于把框架原来的隐式路由改成显式路由这种情况，如果你没有动手搭建过框架，你会不知所措。&lt;/p&gt;
&lt;p&gt;我们这里对于框架的搭建还不是从头到尾写一个框架这种情况，composer（php的包管理工具，类似前端的npm），我们可以像拼接乐高积木那样搭建一个框架，那用什么来充当积木间的凹槽呢，我觉得命名空间可以充当凹槽之一。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cookie和session的思考</title>
    <link href="http://yoursite.com/2018/05/18/cookie%E5%92%8Csession%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2018/05/18/cookie和session的思考/</id>
    <published>2018-05-18T09:38:47.000Z</published>
    <updated>2018-05-21T10:30:31.308Z</updated>
    
    <content type="html"><![CDATA[<p>最近新开了一个bbs的项目，因为也有登录和退出，但问题来了，和大多数的公司内部项目一样，如果每个项目都有自己的登录名和密码，都得注册，每次去不同的项目用户都需要进行登录，估计用户会疯吧。其实这个问题很久之前就遇到过，当时是别的部门的项目希望通过我们这边保存的用户信息进行登录，老大的想法是写一个接口给他们使用，但是如果项目越来越多，每次写接口肯定不太合适，那位同事和我说过单点登录，趁着这次机会，自己也了解了下。</p><a id="more"></a><p>首先是 /的理解。</p><p>关于相对路径和绝对路径，一般的解释是以/开头的就是绝对路径，以./开头的就是相对路径，没有这个开头的其实也是相对路径。</p><p>这个在linux中是绝对正确的, /这个在服务器中指代的就是/目录。</p><p>但这个理论也用在前端代码中，难道我们src = ‘/assets/xxx’,是去服务器根目录下assets目录下查找文件吗，显然这个理论是不正确的，所以这个/在前端代码中的意思是网站的根目录，对！！比如这个前端网站是itbasic.datatom.com,那么这个/指代的就是apache里面配置的root文件夹，所以前端代码中的这个/是由apache或者nginx等之类的web server 部署的时候决定的。</p><p>todo:</p><p>itbasic中view文件夹不在/目录下，但是里面引用的文件相对路径却是相对/路径的，这是个很奇怪的问题。</p><p>php中有个函数setcookie,这是个在客户端种植cookie的函数，比如我们为了维持http的有状态，所以使用了session机制，通过在客户端的记录phpsessid ，然后服务器端（我用的是apache 的模块加载，默认是放在/tmp目录下）sess_(phpsessid)这个文件，这个文件中会保存你想让这个连接保存的相关信息。</p><p>那什么时候服务器端会在客户端记录phpsessid呢，是在start_session() ，这个函数调用的时候，php已经为我们封装好了对应的方法，注意setcookie，本质上是通过给浏览器头部发送消息，可以看下你调用setcookie这个方法的response，他的返回头中会有set-cookie，我的理解是如果想要返回头信息，在这之前不能有任何的输出，所以才会在start_session()之前不能有任何的输出。</p><p>setcookie函数可以看下，默认是在 当前文件所在路径下种植cookie，可以改成/,就可以在根域名下种植了，根域名下种植的好处就是下面的所有文件都能访问和删除这个cookie，如果你是在某个文件下种植的，只有当前文件才能放访问到，比如/bbs/dist,只有这个路径下的文件才能访问到。</p><p>还有放在/下的好处就是，/就在发送请求的时候他会自动的放在请求头部信息中，但是 如果你是放在/bbs/dist下面，他只会在请求/bbs/dist下的时候会携带，当访问/home之类的时候就不会携带。</p><p>还有个问题是关于重定向的，之前遇到的重定向就是爬取页面的时候会返回304，其实还有别的作用，比如cookie的种植。当今时代，api盛行，感觉这就是我忽略重定向的原因，我曾想着通过请求接口的方式进行setcookie，但好像是失败的，只能通过header（）这种方式。</p><p>关于单点登录：</p><p>使用场景：其实是一个很常见的情况，公司有很多系统，但用户基本信息只用一个就好了，虽然可以通过在各个系统中通过读取同一个数据库中的同一个表来实现登录，但如果每次用户使用公司的各个系统都得登录，这种体验真是太差了，最简单的方法，如果是在相同的域名下，可以通过在根域名下种植一个cookie信息，然后每次登录检测这个信息，这样其他域名也能检测到，这样就实现了统一登录和注销。</p><p>其实itbasic就是用的这个原理，所有的同一个域名下都可以使用这个原理，itbasic稍有不同就是登录原理的不同，一个是用cookie，一个用的是token。</p><p>其实最方便扩展的还是单点登录，对于单点登录就是独立出一个登录系统，虽然各个界面都有自己的登录，但每次登录之后都会在中间系统注册一下，然后每次登录都会去中间系统检测下是否登录，如果登录了，就不用再登录了，如果没有登录，首先在自己的系统中实现登录，再去中间系统中保存已登录状态。注销的时候也是，首先在中间系统中实现注销，然后遍历删除各个子系统中的登录状态。</p><p>单点登录因为没有去实现，所以理解还不是很深刻，只知道中间的登录系统最好用https。</p><p>还有对于session，传统的是以文件的形式保存，遇到的一个bug就是itbasic服务器内容满了，导致session写入一直失败，而bbs中token的作用类似session，但是他是放在redis中存储的，就不会有这个问题，感觉这也是session用redis和memcahe实现的好处之一，而不用file实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近新开了一个bbs的项目，因为也有登录和退出，但问题来了，和大多数的公司内部项目一样，如果每个项目都有自己的登录名和密码，都得注册，每次去不同的项目用户都需要进行登录，估计用户会疯吧。其实这个问题很久之前就遇到过，当时是别的部门的项目希望通过我们这边保存的用户信息进行登录，老大的想法是写一个接口给他们使用，但是如果项目越来越多，每次写接口肯定不太合适，那位同事和我说过单点登录，趁着这次机会，自己也了解了下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>验证器</title>
    <link href="http://yoursite.com/2018/04/25/%E9%AA%8C%E8%AF%81%E5%99%A8/"/>
    <id>http://yoursite.com/2018/04/25/验证器/</id>
    <published>2018-04-25T12:01:08.000Z</published>
    <updated>2018-04-25T12:25:45.119Z</updated>
    
    <content type="html"><![CDATA[<p>验证器应该是我们在使用TP,Laravel这些框架的时候经常遇到的,英文名Validate,为什么要验证器呢？数据验证应该是所有web api的第一步，通过校验前端数据的是否合法，来进行数据的接下来的操作，如果数据不合法，直接退回给前端，而不用执行。</p><a id="more"></a><p>Laravel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//验证数据的正确性</div><div class="line">        $this-&gt;validate($request, [</div><div class="line">           &apos;name&apos;=&gt;&apos;required|max:50&apos;,</div><div class="line">            &apos;email&apos;=&gt;&apos;required|email|unique:users|max:255&apos;,</div><div class="line">            &apos;password&apos;=&gt;&apos;required|confirmed|min:6&apos;</div><div class="line">        ]);</div></pre></td></tr></table></figure><p>TP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">protected $rule = [</div><div class="line">        &apos;name&apos; =&gt; &apos;require|isNotEmpty&apos;,</div><div class="line">        &apos;mobile&apos; =&gt; &apos;require|isMobile&apos;,</div><div class="line">        &apos;province&apos; =&gt; &apos;require|isNotEmpty&apos;,</div><div class="line">        &apos;city&apos; =&gt; &apos;require|isNotEmpty&apos;,</div><div class="line">        &apos;country&apos; =&gt; &apos;require|isNotEmpty&apos;,</div><div class="line">        &apos;detail&apos; =&gt; &apos;require|isNotEmpty&apos;</div><div class="line">    ];</div><div class="line"></div><div class="line">$result = $this-&gt;batch()-&gt;check($param);</div></pre></td></tr></table></figure><p>其实两个很类似，就是通过传入验证条件和接受到的参数，来进行对应规则的验证.</p><p>自己</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace Libs;</div><div class="line"></div><div class="line">use Framework\Exception\ClientException;</div><div class="line">use Framework\Exception\ServerException;</div><div class="line"></div><div class="line">class Validate</div><div class="line">&#123;</div><div class="line">    static $res = true;</div><div class="line">    static $errMsg = &apos;&apos;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param $arr, 传入的验证规则</div><div class="line">     * @param $params, 请求的数据</div><div class="line">     * @throws ClientException</div><div class="line">     */</div><div class="line">    public static function validate($arr, $params)</div><div class="line">    &#123;</div><div class="line">        foreach ($arr as $a_key=&gt;$a_value) &#123;</div><div class="line">            $funcArr = explode(&apos;|&apos;, $a_value);</div><div class="line">            foreach ($funcArr as $f_key=&gt;$f_value) &#123;</div><div class="line">                if(is_callable([__CLASS__, $f_value])) &#123;</div><div class="line">                    call_user_func_array([__CLASS__, $f_value], [$a_key, $params]);</div><div class="line">                &#125; else &#123;</div><div class="line">                    throw new ServerException(&apos;&apos;, &apos;你的验证函数名不存在啦&apos;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(self::$res == false) &#123;</div><div class="line">            throw new ClientException(&apos;&apos;, self::$errMsg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static function required($key, $arr)</div><div class="line">    &#123;</div><div class="line">        if (!key_exists($key, $arr)) &#123;</div><div class="line">            self::$res = false;</div><div class="line">            self::$errMsg .= $key.&apos;不存在 | &apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public function __call($name, $arguments)</div><div class="line">    &#123;</div><div class="line">        throw new ServerException(&apos;&apos;, &apos;你的验证函数名不存在啦&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>controller调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$validate = [&apos;comment_id&apos;=&gt;&apos;required|test&apos; ,&apos;sex&apos;=&gt;&apos;required&apos;];</div><div class="line">Validate::validate($validate, static::params());</div></pre></td></tr></table></figure><p>需要注意的点是：</p><ol><li>上面验证器的使用过程中并不是检测到错误就立刻返回，而是检测出所有的错误再返回，所以我定义了两个static用来存储数据，当标志位是false的时候再把存储的错误信息一起返回。</li><li>is_callable函数的使用，验证函数是否能执行，如果是类中，[‘类名’， ‘方法名’]， 都是字符串，注意这个类名用__CLASS__,之前我直接写的Validate，这样肯定是不行的，同理call_user_func_array这个也是，相比较于call_user_func,这个是后面传入函数中的参数要以array的形式，如果是非静态函数，就传入类名，静态的话要传入对象哦，$this,或者new一个对象吧。<a href="https://my.oschina.net/codespring/blog/535355" target="_blank" rel="external">call_user_func_array</a> <a href="http://www.111cn.net/phper/php-function/95406.htm" target="_blank" rel="external">is_callable</a></li><li>需要注意static的使用，用的self哦，一般的使用用的this(都是在类中)，在类的外面的话，static 是 类名::,非static用的是 object-&gt;func.</li><li>__call 是类中不存在这个方法的时候调用会自动执行，传入的两个参数第一个是调用的方法名，第二个参数是参数.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;验证器应该是我们在使用TP,Laravel这些框架的时候经常遇到的,英文名Validate,为什么要验证器呢？数据验证应该是所有web api的第一步，通过校验前端数据的是否合法，来进行数据的接下来的操作，如果数据不合法，直接退回给前端，而不用执行。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>MIME TYPE的作用</title>
    <link href="http://yoursite.com/2018/04/23/MIME-TYPE%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/23/MIME-TYPE的作用/</id>
    <published>2018-04-23T13:44:00.000Z</published>
    <updated>2018-04-23T15:12:46.144Z</updated>
    
    <content type="html"><![CDATA[<p>其实本来不用单独写这篇文章的，可以放在http协议中，因为他本来就是关联这个http请求和返回信息中的content type，但其实用的还挺多，主要就是上传文件这块和php不借助插件而是通过输出html表格元素让页面按照excel来解析的方式生成excel。</p><a id="more"></a><blockquote><p>一、</p><p>首先，我们要了解浏览器是如何处理内容的。在浏览器中显示的内容有 HTML、有 XML、有 GIF、还有 Flash ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示呢？答案是 MIME Type，也就是该资源的媒体类型。<br>媒体类型通常是通过 HTTP 协议，由 Web 服务器告知浏览器的，更准确地说，是通过 Content-Type 来表示的，例如:<br>Content-Type: text/HTML<br>表示内容是 text/HTML 类型，也就是超文本文件。为什么是“text/HTML”而不是“HTML/text”或者别的什么？MIME Type 不是个人指定的，是经过 ietf 组织协商，以 RFC 的形式作为建议的标准发布在网上的，大多数的 Web 服务器和用户代理都会支持这个规范 (顺便说一句，Email 附件的类型也是通过 MIME Type 指定的)。<br>通常只有一些在互联网上获得广泛应用的格式才会获得一个 MIME Type，如果是某个客户端自己定义的格式，一般只能以 application/x- 开头。<br>XHTML 正是一个获得广泛应用的格式，因此，在 RFC 3236 中，说明了 XHTML 格式文件的 MIME Type 应该是 application/xHTML+XML。(现在不用xml，而是用json，一般在返回头中都有)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;$response-&gt;header(&apos;Content-Type&apos;, &apos;application/json&apos;);</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>注意这个content type，不仅在response中有，在request中也有，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;application/x-www-form-urlencoded（使用HTTP的POST方法提交的表单）</div><div class="line">&gt;multipart/form-data（同上，但主要用于表单提交时伴随文件上传的场合）</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>上面的两种应该是我们平时最常见到的，一种是普通的表单提交，一种是当表单中有上传文件的时候进行的提交方式中content type的设置(好像默认的表单提交就是第一种，不用设置，只有上传的时候需要特殊设置，像我们itbasic上面，大部分时候用的是ajax进行提交，而不是表单，content type在ajax中应该封装成了text/json)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&lt;form action=&quot;http://192.168.33.10:56732/bbs/login/test&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">&gt;&lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;</div><div class="line">&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt;</div><div class="line">&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot;&gt;&lt;br&gt;</div><div class="line">&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;</div><div class="line">&gt;&lt;/form&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>当然，处理本地的文件，在没有人告诉浏览器某个文件的 MIME Type 的情况下，浏览器也会做一些默认的处理，这可能和你在操作系统中给文件配置的 MIME Type 有关。比如在 Windows 下，打开注册表的“HKEY_LOCAL_MACHINESOFTWAREClassesMIMEDatabaseContent Type”主键，你可以看到所有 MIME Type 的配置信息。</p></blockquote><p>更详细的介绍<a href="https://www.cnblogs.com/jsean/articles/1610265.html" target="_blank" rel="external">https://www.cnblogs.com/jsean/articles/1610265.html</a></p><p>因为这篇文章复制有很多重复的部分（▄█▀█●），复制下来改很麻烦。</p><p>认识的几点就是：服务器端要存储文件后缀名和mime type的对应关系，我是这样理解的，虽然在linux下文件后缀名并没有什么卵用，感觉这都是content type的作用，但在windows下起了很大的作用啊，在服务器端保存文件的使用，需要通过content type对应的mime type 转换成文件后缀名，然后保存（虽然感觉直接读上传的文件名就可以了，感觉也许是兼容那些没有文件后缀名的情况吧，linux？）</p><p>response 里面content type的作用很明显是通知客户端怎么解析这个文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实本来不用单独写这篇文章的，可以放在http协议中，因为他本来就是关联这个http请求和返回信息中的content type，但其实用的还挺多，主要就是上传文件这块和php不借助插件而是通过输出html表格元素让页面按照excel来解析的方式生成excel。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://yoursite.com/2018/04/23/Redis/"/>
    <id>http://yoursite.com/2018/04/23/Redis/</id>
    <published>2018-04-23T12:54:46.000Z</published>
    <updated>2018-04-23T13:28:44.120Z</updated>
    
    <content type="html"><![CDATA[<p>缓存，对于现代web很重要，首先他比较快嘛，因为是在内存中的，像很多功能也是通过缓存来实现的，比如点赞功能之类的，记录下常用的redis命令。因为是写php的，所以举得例子大部分还是以php的redis扩展为参照，其实大部分都一样。（没有系统的学习，大致浏览了下菜鸟教程上的redis教程）</p><a id="more"></a><p>安装</p><p>常见知识点：</p><p>端口号：6379</p><p>密码：可以设置，也可以不设置。itbasic上没有设置，但只允许本机才能连接服务器上的redis。</p><p>启动：安装目录下的redis-server,最好后台挂起，要不然这个cmd就没法用了</p><p>连接： 安装目录下的redis-cli </p><p>常见数据类型：1.string 2.hash 3. 4. 5</p><p>通用命令：</p><p>keys * : 获取所有的key</p><p>string：get(),根据key值获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class \Lib\Redis extends \Redis  //因为这个继承于php自带的扩展，所以命名空间在\下</div><div class="line">&#123;</div><div class="line">  public function __construct()</div><div class="line">  &#123;</div><div class="line">   建立连接</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$redis = new \Lib\Redis();</div><div class="line">$redis-&gt;get($key);</div></pre></td></tr></table></figure><p>set,设置值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;set($key, $value,)</div></pre></td></tr></table></figure><p>hash: hash类型不能像string的set方法中设置系统key的过期时间，可以通过调用expire来设置时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;expire($key, 7*24*60*60);</div></pre></td></tr></table></figure><p>hset: 设置hash的filed的值,这个key意思就是这个hash对象的唯一标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;hset($key, $filed, $value)</div></pre></td></tr></table></figure><p>hmset: 给这个对象进行赋值, $arr是关联数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;hmset($key, $arr)</div></pre></td></tr></table></figure><p>hgetall: 获取这个hash对象所有的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;hgetall($key)</div></pre></td></tr></table></figure><p>坑：</p><p>之前很傻，因为接触到redis的时候，听到的好处就是相比较于mecache这种，多了很多的数据类型，memcache这种只有string，然后redis又在原先5中数据类型的基础上增加了表示地理坐标的新的数据类型。当时遇到一个问题就是想一个键值既能对应string，也能对应hash，想有没有这种数据类型。其实当时的思路是完全跑偏的，完全可以通过先构造一个比如token=&gt;string,string=&gt;hash两个类型，第一个是string，第二个是hash，通过token既能得到简单的string，也能得到hash。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缓存，对于现代web很重要，首先他比较快嘛，因为是在内存中的，像很多功能也是通过缓存来实现的，比如点赞功能之类的，记录下常用的redis命令。因为是写php的，所以举得例子大部分还是以php的redis扩展为参照，其实大部分都一样。（没有系统的学习，大致浏览了下菜鸟教程上的redis教程）&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>异常处理</title>
    <link href="http://yoursite.com/2018/04/19/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/19/异常处理/</id>
    <published>2018-04-19T12:48:39.000Z</published>
    <updated>2018-04-20T10:44:32.810Z</updated>
    
    <content type="html"><![CDATA[<p>异常处理其实是我一直很少接触的，之前是因为异常处理相比较于php的基础知识更高一层，大学时就有个习惯，越到后面的内容看的越少，比如c语言的指针，每学期的专业课，都是只能讲完前面的语法部分，运算符？if？else？for循环？后面就没了。</p><p>但当我学习tp5的时候，发现tp5的所有错误都会以异常的形式抛出，然后在7月老师的指导下，认识到了AOP思想，了解了统一异常处理类的时候，我才逐渐重视了这个东西。</p><a id="more"></a><p>新项目中：因为我希望把每个函数写的尽量短些，虽然以后追踪问题的时候可能会跳来跳去，但如果单单只靠函数的名称就能了解到函数的作用，这将是多么美好的一件事，于是产生了一个问题：一般只有最外层的函数才能决定最终抛给客户端的内容，但如果我们在内部自己调用的函数中也这么写，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public function father()</div><div class="line">&#123;</div><div class="line">  $res = $this-&gt;children();</div><div class="line">  return [</div><div class="line">  &apos;code&apos; =&gt; 200,</div><div class="line">  &apos;msg&apos; =&gt; $res</div><div class="line">]</div><div class="line">&#125;</div><div class="line"></div><div class="line">public function children()</div><div class="line">&#123;</div><div class="line">  return [</div><div class="line">  &apos;code&apos; =&gt; 500,</div><div class="line">  &apos;msg&apos; =&gt; &apos;你有毒&apos;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个样子返回的结果肯定不是我们希望的，你可以说我可以处理啊，但其实如果层次深了之类的，处理是很麻烦的，如果我能立刻把结果给到前端，那该多棒啊，这时候就可以通过抛出异常，最外层统一对异常进行处理，比如抛出异常的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">throw new ControllerException(404, &apos;controller not exist.&apos;);</div></pre></td></tr></table></figure><p>这个ControllerException 是继承于基本的\Exception，php自带的。然后我们在最外层进行捕获</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">date_default_timezone_set(&apos;Asia/Shanghai&apos;);</div><div class="line">include_once(&apos;vendor/autoload.php&apos;);</div><div class="line">include_once &apos;./Libs/Eagles/Document.php&apos;;</div><div class="line"></div><div class="line">define(&apos;SWOOLE_PORT&apos;, 56732);</div><div class="line">define(&apos;SWOOLE_ERROR_LOG&apos;, &apos;/var/log/swoole_error.log&apos;);</div><div class="line"></div><div class="line">define(&apos;EAGLES_SERVER&apos;, &apos;211.144.114.26&apos;);</div><div class="line">define(&apos;EAGLES_PORT&apos;, &apos;17200&apos;);</div><div class="line">// error_reporting(0);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// http服务的配置</div><div class="line">$http = new swoole_http_server(&quot;0.0.0.0&quot;, SWOOLE_PORT);</div><div class="line">$http-&gt;set([</div><div class="line">    &apos;worker_num&apos; =&gt; 20,             // cpu 6核 默认启动6个, 1-4 倍合适  占用：40M内存*20</div><div class="line">    // &apos;task_worker_num&apos; =&gt; 6,         //开启task功能</div><div class="line">    // &apos;daemonize&apos; =&gt; true,            // 守护进程</div><div class="line">    &apos;log_file&apos; =&gt; SWOOLE_ERROR_LOG,</div><div class="line">    &apos;buffer_output_size&apos; =&gt; 8 * 1024 *1024,        // 8M 缓冲区。占用 8*12M,api接口可最大返回8M的数据内容</div><div class="line">    &apos;package_max_length&apos;=&gt; 5 * 1024 * 1024,         // 最大数据块是5M。上传可上传4M大小文件</div><div class="line">    // 配置静态文件根目录</div><div class="line">    // &apos;enable_static_handler&apos; =&gt; true,</div><div class="line">    // &apos;document_root&apos; =&gt; &apos;/home/projectx/server/upload&apos;</div><div class="line">    // &apos;daemonize&apos; =&gt; true,</div><div class="line">    // &apos;pid_file&apos; =&gt; __DIR__.&apos;/server.pid&apos;</div><div class="line">]);</div><div class="line"></div><div class="line">use Framework\Base\Route as Router;</div><div class="line">use Framework\DB\ConnectionManager as ConnectionManager;</div><div class="line">use Framework\Log\Logger as Logger;</div><div class="line"></div><div class="line">$config = include_once(&apos;config/config.php&apos;);</div><div class="line">Logger::logfile($config[&apos;logfile&apos;]);</div><div class="line"></div><div class="line">ConnectionManager::db_config($config[&apos;db&apos;]);</div><div class="line"></div><div class="line">$http-&gt;on(&apos;request&apos;, function ($request, $response) &#123;</div><div class="line">    try&#123;</div><div class="line">        if ($request-&gt;server[&apos;path_info&apos;] == &apos;/favicon.ico&apos;</div><div class="line">            || $request-&gt;server[&apos;request_uri&apos;] == &apos;/favicon.ico&apos;) &#123;</div><div class="line">            return $response-&gt;end();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $param = $request-&gt;server[&apos;request_method&apos;] == &apos;POST&apos; ? @$request-&gt;post : @$request-&gt;get;</div><div class="line">        $data = \Libs\Common::getCallData(@$request-&gt;header[&apos;www-authorization&apos;], $request-&gt;header[&apos;host&apos;], $request-&gt;server[&apos;request_uri&apos;], $param, $request-&gt;server[&apos;remote_addr&apos;], $request-&gt;server[&apos;request_method&apos;]);</div><div class="line">        //\Libs\ElasticSearch::setIndexTableDoc(&apos;projectx_log&apos;, &apos;call_log&apos;, $data[&apos;doc_id&apos;], $data[&apos;data&apos;]);</div><div class="line"></div><div class="line">        $allow_method = [&apos;POST&apos;, &apos;GET&apos;, &apos;OPTIONS&apos;];</div><div class="line">        if(!in_array($request-&gt;server[&apos;request_method&apos;], $allow_method))&#123;</div><div class="line">            $response-&gt;status(405);</div><div class="line">            return $response-&gt;end();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //如果需要设置允许所有域名发起的跨域请求，可以使用通配符 *</div><div class="line">        $response-&gt;header(&quot;Access-Control-Allow-Origin&quot;, &apos;*&apos;);</div><div class="line">        $response-&gt;header(&apos;Access-Control-Allow-Methods&apos;, &apos;POST, GET&apos;);</div><div class="line">        $response-&gt;header(&apos;Access-Control-Allow-Headers&apos;, &apos;Origin, X-Requested-With, Content-Type, Accept, www-authorization&apos;);</div><div class="line">    </div><div class="line">        $uri = $request-&gt;server[&apos;request_uri&apos;];</div><div class="line">        $uri = $uri;</div><div class="line">        $res = Router::dispatch($uri, $request, $response);</div><div class="line"></div><div class="line">        @$response-&gt;header(&apos;Content-Type&apos;, &apos;application/json&apos;);</div><div class="line">        @$response-&gt;end(json_encode($res));</div><div class="line">    &#125;catch(\Framework\Exception\ControllerException $ce)&#123;</div><div class="line">        $status = $ce-&gt;getStatusCode();</div><div class="line">        $response-&gt;status($status);</div><div class="line"></div><div class="line">        $errorcode = $ce-&gt;getErrorCode();</div><div class="line">        $msg = $ce-&gt;getMsg();</div><div class="line">        $response-&gt;header(&quot;Access-Control-Allow-Origin&quot;, &apos;*&apos;);</div><div class="line">        $response-&gt;header(&apos;Content-Type&apos;, &apos;application/json&apos;);</div><div class="line">        $response-&gt;end(json_encode([&apos;code&apos;=&gt;$errorcode, &apos;msg&apos;=&gt;$msg]));</div><div class="line">    &#125;catch(\Framework\Exception\RouteException $re)&#123;</div><div class="line">        $status = $re-&gt;getStatusCode();</div><div class="line">        @$response-&gt;header(&quot;Access-Control-Allow-Origin&quot;, &apos;*&apos;);</div><div class="line">        @$response-&gt;status($status);</div><div class="line">        @$response-&gt;end();</div><div class="line">    &#125;catch(Exception $e)&#123;</div><div class="line">        @$response-&gt;header(&quot;Access-Control-Allow-Origin&quot;, &apos;*&apos;);</div><div class="line">        @$response-&gt;status(500);</div><div class="line">        @$response-&gt;end(&apos;exceptions:&apos; . $e-&gt;getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">echo &quot;server start listening port:&quot; . SWOOLE_PORT . PHP_EOL;</div><div class="line">$http-&gt;start();</div></pre></td></tr></table></figure><p>看见了嘛，最外层的几个catch就是对他的捕获，注意最大的要写在外面哦，因为前面的如果捕获了，后面的就不会处理了呢。</p><p>其实通过上面的例子我们还能了解到其实一个php项目说到底还是一个脚本，上面代码是我用swoole搭建的webserver时候的启动脚本，其实用swoole能更好的帮助phper理解web是怎么样运行的，当服务器监听到request过来的时候，我们通过这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Router::dispatch($uri, $request, $response);</div></pre></td></tr></table></figure><p>去执行对应的项目里面的代码，这就是我们平时经常写的工程，大部分用的是面向对象的思想，定义一个类啊，方法啊，因为这里面就像一个仓库，是我们用来取东西的，所以没有那种流程的概念，唯一的流程概念应该在我们这个启动脚本里，这也是我们把try  catch 写在这里面的一个原因（这也是我找php统一异常处理的方法应该定义在哪的时候发现的），后来继续思考了下，感觉不管是我之前做的那个itbasic，还是现在这个bbs，其实都是脚本+类库合在一起的，因为很多时候我们往往都是在写类库，而忽略了脚本的存在（一般都是写好的，很少需要改），甚至把一个项目就当做一个面向对象，而忘记了面向过程的存在，之前群里面有个朋友不知道在哪定义通过哪个搜素引擎查找到自己网站的网上百度的方法，根源也是因为不理解一个项目的脚本到底存在于什么地方。</p><p>其实类比自己接触的两个框架，tp和laravel,为嘛他的入口文件index.php和路由文件分开了呢，:sweat: 其实本该分开，路由是个类库，入口文件是个脚本呢，之所以产生这种坑爹的想法是itbasic的route.php即是入口文件，也是路由类定义的地方。</p><p>观察server.php, 观察config目录，发现set.php 是定义的常量，这样在使用的时候可以直接使用，但是config.php 是返回的数组，项目里面想用这里面的值是不可以直接使用的，那数据库是怎么连接的呢，发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ConnectionManager::db_config($config[&apos;db&apos;]);</div></pre></td></tr></table></figure><p>这个类和普通的类不一样，这个直接在入口文件中就有加载，这个是把config里面的值保存到他的类变量中了，所以在项目里面可以直接使用。</p><p>还有上次那个exception，其实子类继承了父类，父类中变量和子类中变量重名，但他们是各自的，子类继承了父类，用了父类获取自己errorcode的方法，那个其实是获取父类的，而并非是获取子类的，这点要注意。</p><p>子类继承父类的初始化函数的时候不要忘记传参数了哦。</p><p>wait:</p><p>1.异常处理的细节</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异常处理其实是我一直很少接触的，之前是因为异常处理相比较于php的基础知识更高一层，大学时就有个习惯，越到后面的内容看的越少，比如c语言的指针，每学期的专业课，都是只能讲完前面的语法部分，运算符？if？else？for循环？后面就没了。&lt;/p&gt;
&lt;p&gt;但当我学习tp5的时候，发现tp5的所有错误都会以异常的形式抛出，然后在7月老师的指导下，认识到了AOP思想，了解了统一异常处理类的时候，我才逐渐重视了这个东西。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="异常处理" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>微信开发</title>
    <link href="http://yoursite.com/2018/04/18/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/04/18/微信开发/</id>
    <published>2018-04-18T01:29:49.000Z</published>
    <updated>2018-04-18T01:33:11.936Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>postgresql常见问题总结</title>
    <link href="http://yoursite.com/2018/04/17/postgresql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/04/17/postgresql常见问题总结/</id>
    <published>2018-04-17T07:47:01.000Z</published>
    <updated>2018-04-26T02:14:43.215Z</updated>
    
    <content type="html"><![CDATA[<p>本来是不想写这篇文章的，因为感觉自己对于postgresql理解不够深入，但因为生活中对于postgresql有些问题总是遇到，所以记录下来，方便以后查找。</p><a id="more"></a><p>1.navicate连接postgresql</p><p>第一次建立连接肯定会报错啦</p><p><img src="http://ozys8fka7.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180417155030.png" alt="navicate连接postgresql属性"></p><p>上面初始数据库的意思并不是数据库的名称。毕竟这次连接成功后，里面有一堆的数据库</p><blockquote><p>The server doesn’t grant access to the database: the server reports<br>FATAL: no pg_hba.conf entry for host “192.168.0.123”, user “postgres”, database “postgres” FATAL: no pg_hba.conf entry for host “192.168.0.123”, user “postgres”, database “postgres”</p></blockquote><p>谷歌翻译</p><blockquote><p>服务器不授予对数据库的访问权限：服务器报告<br>FATAL：主机“192.168.0.123”，用户“postgres”，数据库“postgres”没有pg_hba.conf条目FATAL：主机“192.168.0.123”没有pg_hba.conf条目，用户“postgres”，数据库“postgres”</p></blockquote><p>其实字面意思就很容易理解，虽然我还是百度的错误答案。我自己理解就是入口不被允许,就觉办法如下</p><blockquote><p>PostgreSQL数据库为了安全，它不会监听除本地以外的所有连接请求，当用户通过JDBC访问是，会报一些如下的异常：</p><p>org.postgresql.util.PSQLException: FATAL: no pg_hba.conf entry for host</p><p>要解决这个问题，只需要在PostgreSQL数据库的安装目录下找到/data/pg_hba.conf,找到“# IPv4 local connections:”</p><p>在其下加上请求连接的机器IP</p><p>host all all 127.0.0.1/32 md5 //坑爹，那里面对于192.168.23.10当做192.168.23.1</p><p>32是子网掩码的网段；md5是密码验证方法，可以改为trust</p></blockquote><p>一个服务器，有内网ip（类似192.168这些，有外网ip 211.这种，有127.0.0.1 这种，如果要包括所有的，就得用0.0.0.0，感觉如果你访问一个服务器用的是内网ip，应该意思就是你们在同一个局域网中吧。很奇怪的一点是，之前说vagrant会把ssh的22端口映射到host的2222端口，导致了127.0.0.1:2222或者192.168.23.10:22都能访问，其实不太懂这个原理，但好像这是由两个不同的网卡决定的，我好像把itbasic那上面一个网卡禁止了，导致127那种ssh访问不了，感觉就是虽然内网ip和外网ip可以对应同一个端口，但也可以对应不同的端口）</p><p>2.导入导出数据库</p><p>导出：/opt/pgsql/bin/pg_dump -U postgres itbasic &gt; /home/itbasic/itbasic.sql</p><p>pg_dump 是postgresql安装之后的一个命令，-U 指定用户 postgres, itbasic,是数据库名，postgresql好像只能用postgres这个用户执行操作，itbasic这个数据库名一定要指定，还有pg_dump 这个命令所在目录没有加入系统变量的话，一定要加上路径，后面 &gt;/home/itbasic/itbasic.sql,代表数据导出到具体的文件中。</p><p>导出</p><p>数据库的导入必须要先创建这个数据库</p><p>postgresql安装之后的命令会有createdb，但用这个创建数据库感觉挺麻烦，直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. /opt/pgsql/bin/pgsql -U postgres itbasic  //进入pgsql 客户端</div><div class="line">2. create database project x   //创建数据库</div><div class="line">3. \q   //退出pgsql客户端</div><div class="line">4. /opt/pgsql/bin/pgsql -U postgres projectx -f /home/itbasic/projectx.sql   //导入数据库</div></pre></td></tr></table></figure><p>3.导入导出表</p><p>导入导出表和导入导出数据库的最大区别是导入导出数据库需要先建立一个数据库，而表则不用，最好还先把这张表删除了</p><p>导出</p><p>/opt/pgsql/bin/pg_dump -U postgres itbasic  -t dt_admin &gt; /home/itbasic/admin.sql</p><p>导入</p><p>/opt/pgsql/bin/psql -U postgres itbasic -f /home/itbasic/admin.sql</p><p>4.数组类型</p><p>array_remove  会把出现的元素全都移除掉，而不是只移除一个   love=array_remove(love, chen.ye)</p><p>array_append   love= array_append(love, chen.ye)</p><p>如果元素不存在，也不会报错，只会接着往下执行</p><p>any()  chenye = any(love)  love这个字段中是否有陈野</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来是不想写这篇文章的，因为感觉自己对于postgresql理解不够深入，但因为生活中对于postgresql有些问题总是遇到，所以记录下来，方便以后查找。&lt;/p&gt;
    
    </summary>
    
      <category term="postgresql" scheme="http://yoursite.com/categories/postgresql/"/>
    
    
      <category term="postgresql" scheme="http://yoursite.com/tags/postgresql/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>apache简单配置</title>
    <link href="http://yoursite.com/2018/04/16/apache%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/16/apache简单配置/</id>
    <published>2018-04-16T13:38:54.000Z</published>
    <updated>2018-04-17T01:22:55.117Z</updated>
    
    <content type="html"><![CDATA[<p>关于apache的配置文件。不管是xampp安装的lamp环境，还是自己在linux下面搭建的lamp环境，之前关于apache的配置都是直接copy网上的，用的虚拟域名，本质是还是不够理解的，关于.htaccess 也只是刚开始学习tp的时候看到过，后来因为配置虚拟域名能解决问题，就没有过多的了解这个.htaccess了。</p><a id="more"></a><p>首先说一下之前遇到的问题。某次，帮助交付的一个同事配置xampp环境，他当时对多站点的配置文件都写在了apache的主配置文件中，httpd.conf,当时因为已经了解了虚拟域名，所以我在同级目录extra下面的httpd-vhost.conf中帮他写了新的配置，当时用的是不同域名分发到不同文件夹下的方式，其实这在实际生活中也是这样的，因为如果靠的是端口号的话，因为web服务默认是80端口，如果用了别的端口号，比如http:\\www.baidu.com:800, 这样访问百度的web服务，这对广大用户是不友好的，因为对于非程序员来说，根本不知道:800是什么。如果不想用域名开进行分发，端口号也是可以的，但为了不让用户去记忆端口号，可以通过nginx来帮忙。比如itbasic.datatom.com和bbs.datatom.com虽然绑定的是同一个服务器，但是通过nginx的转发，到了不同的端口，一个因为是从itbasic.datatom.com+ 80端口来的，所以转发到本服务器的8080端口，一个是从bbs.datatom.com+80端口来的，所以到了8081端口。我就是通过上述两种方式之一的域名不同来帮那个同事写的vhost配置的，可是呢，当我输入域名的时候，他虽然能访问，但是访问的还是之前他的一个网站，fuck！！！算了，配置文件写的这么乱，我就没找原因了，直接帮他copy了以前主配置文件里面写的一个站点配置。</p><p>其实后来我差不多知道原因了，大概是直接在主配置文件里面写了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ServerName localhost:80</div><div class="line">DocumentRoot &quot;F:/www&quot;</div><div class="line">&lt;Directory &quot;F:/www&quot;&gt;</div><div class="line">    #</div><div class="line">    # Possible values for the Options directive are &quot;None&quot;, &quot;All&quot;,</div><div class="line">    # or any combination of:</div><div class="line">    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</div><div class="line">    #</div><div class="line">    # Note that &quot;MultiViews&quot; must be named *explicitly* --- &quot;Options All&quot;</div><div class="line">    # doesn&apos;t give it to you.</div><div class="line">    #</div><div class="line">    # The Options directive is both complicated and important.  Please see</div><div class="line">    # http://httpd.apache.org/docs/2.4/mod/core.html#options</div><div class="line">    # for more information.</div><div class="line">    #</div><div class="line">    Options Indexes FollowSymLinks Includes ExecCGI</div><div class="line"></div><div class="line">    #</div><div class="line">    # AllowOverride controls what directives may be placed in .htaccess files.</div><div class="line">    # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:</div><div class="line">    #   AllowOverride FileInfo AuthConfig Limit</div><div class="line">    #</div><div class="line">    AllowOverride All</div><div class="line"></div><div class="line">    #</div><div class="line">    # Controls who can get stuff from this server.</div><div class="line">    #</div><div class="line">    Require all granted</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure><p>问题的关键就是那个server name，因为是localhost：80，但凡是host（windows下）里面127.0.0.1 用的80端口，统一转发到这个目录下，造成了上述结果。其实itbasic的服务器配置上也是这么写的，但之外的那些bbs，51dana用的却是虚拟域名，为啥那个能正常访问呢，在于配置文件上面定义了server name itbasic.datatom.com。其实itbasic那个也是可以通过域名来进行分发的，主要在每个vhost里面加个server name 就可以了。itbasic那个完全也可以不用端口进行转发，完全可以通过域名，在每个vhost里面加上server name就可以了</p><p>先说一下关于vhost的配置方法吧</p><p>打开apache的配置文件 htppd.cnf。分别打开重写扩展和虚拟主机扩展：</p><blockquote><p>LoadModule rewrite_module modules/mod_rewrite.so 这句前面的 注释 # 去掉</p><p>Include conf/extra/httpd-vhosts.conf 这句前面的 注释 # 去掉</p></blockquote><p>但现在一般apache都是默认开启的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;   //包裹的内容代表虚拟主机，端口号80</div><div class="line">    DocumentRoot &quot;D:/wamp/www/testphp/&quot;  //项目的根目录</div><div class="line">    ServerName php.iyangyi.com   //域名</div><div class="line">    ServerAlias www.pptv.cn #可省略  //这个是我们的虚拟域名的别名，可以不要，他的出现场景就是我们希望另外一个域名也往这个目录下调整。比如 www.pptv.cn 我们也希望跳到这里来，就可以这样做，但是前提是 www.pptv.cn 也要绑定host 127.0.0.1</div><div class="line">    ServerAdmin stefan321@qq.com #可省略  //这里填 服务器管理员的邮箱，也可以不要，当服务器出现故障后，如果提前有配置邮箱的话，会往这个邮箱发邮件，或者是显示在网页的错误信息当中。一般我们可以不填。</div><div class="line">    ErrorLog logs/dev-error.log #可省略  //当访问出现错误的时候，就会记录到这里，注意：logs/dev-error.log 这个文件路径是apache的安装目录下的logs 目录 。可以不要。</div><div class="line">    CustomLog logs/dev-access.log common #可省略 //这里填 访问日志，用来记录每一次的请求访问，可以不要。注意：logs/dev-access.log 这个文件路径是apache的安装目录下的logs 目录 。记住：路径后面加common。</div><div class="line">    ErrorDocument 404 logs/404.html #可省略 //这里填 403,404等错误信息调整页面，用来访问出现404页面等情况时的错误页面展示，比较有用，也可以不要。注意：/404.html 这个文件路径是项目的根目录，不是apache的目录。</div><div class="line">    &lt;Directory &quot;D:/wamp/www/testphp/&quot;&gt;</div><div class="line">        Options Indexes FollowSymLinks</div><div class="line">        AllowOverride All</div><div class="line">        Order Allow,Deny</div><div class="line">        Allow from all</div><div class="line">        RewriteEngine on</div><div class="line">        RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line">        RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line">        RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</div><div class="line">    &lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure><p>一般配置的时候，上面写了可省略的都不会配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Directory &quot;D:/wamp/www/testphp/&quot;&gt;</div></pre></td></tr></table></figure><p>是最重要的一步了，这里也是填本项目的路径，然后所有的<code>rewrite</code>规则都是在里面完成。所以这个是很重要的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Options Indexes FollowSymLinks</div></pre></td></tr></table></figure><p>作用我访问php.iyangyi.com，如果文件根目录里有 index.html(index.php)，浏览器就会显示 index.html的内容，如果没有 index.html，浏览器就会显示这文件根目录的目录列表，目录列表包括文件根目录下的文件和子目录。</p><p>到底是优先显示index.php还是index.html 有apache的配置决定的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule dir_module&gt;</div><div class="line">    DirectoryIndex index.html index.htm index.php index.php3  </div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure><p>这个是单独写出来的，而不是写在上述标签之内。这个感觉应该是统一定义一个就行了，或者是在vhost里面直接写directoryindx 这个标签，如果没写默认是index.html或者是index.php</p><p>之前遇到一个问题就是public文件夹因为是统一对外开放的嘛，不做处理的话，比如itbasic.datatom.com/userpic,可以访问服务器上public下面这个userpic文件夹，为了不让用户访问，我们可以去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Options Indexes FollowSymLinks</div></pre></td></tr></table></figure><p>的indexes,用户就不能访问了。</p><p><code>Order Deny,Allow Allow from all</code>这2个一般是组合在一起用。用来<code>设置访问权限</code> ，设置哪些ip可以访问这个域名, 哪些ip禁止访问。</p><p>所以order是设置这2个的组合排序, 不区分大小写，中间用<code>,</code>分开，中间不能有空格。 </p><p>所以order是设置这2个的组合排序, 不区分大小写，中间用<code>,</code>分开，中间不能有空格。<br><code>Order Deny,Allow</code> ：表示设定“先检查禁止设定，没有设定禁止的全部允许”</p><p><code>Order Allow,Deny</code> : 表示设定“先检查允许设定，没有设定允许的全部禁止”</p><p><strong>而且最后的访问结果有第二参数决定！</strong></p><p><code>Deny from All</code> <code>Deny from 127.0.0.1</code> 禁止访问的ip， all 表示全部 </p><p><code>Deny from All</code> <code>Deny from 127.0.0.1</code> 禁止访问的ip， all 表示全部<br><code>Allow from All</code> <code>Allow from 127.0.0.1</code> 允许访问的ip， all 表示全部</p><p>我们看几个他们2个组合的例子。</p><p>这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Order Deny,Allow</div><div class="line">Deny from All</div></pre></td></tr></table></figure><p>表示先检查允许的, 没有允许的全部禁止。但是下却没有Allow，那么就表示是无条件禁止了所有的访问了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Order Deny,Allow</div><div class="line">Deny from all</div><div class="line">Allow from 127.0.0.1</div></pre></td></tr></table></figure><p>上面表示 只允许127.0.0.1访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Order Allow,Deny</div><div class="line">Allow from all</div><div class="line">Deny from 127.0.0.1 192.168.1.51</div></pre></td></tr></table></figure><p>上面表示禁止127.0.0.1和192.168.1.51访问，其他都可以！</p><p>所以这个的组合就可以达到很多的过滤访问效果。</p><p>但现在一般不用那个了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Require all granted</div></pre></td></tr></table></figure><p>才能解决，要么一直都是403。</p><h2 id="RewriteCond-与-RewriteRule-指令格式配置详解"><a href="#RewriteCond-与-RewriteRule-指令格式配置详解" class="headerlink" title="RewriteCond 与 RewriteRule 指令格式配置详解"></a>RewriteCond 与 RewriteRule 指令格式配置详解</h2><p>上面花了大量的时间讲述<code>VirtualHost</code> 里面的一些配置参数的写法和作用，接下来就是rewrite的重点了，3个核心的东西：<strong>RewriteEngine，RewriteCond，RewriteRule</strong></p><p><strong>RewriteEngine</strong> </p><p><strong>RewriteEngine</strong><br>这个是rewrite的<code>总开关</code>，用来开启是否启动url rewrite，要想打开，像这样就可以了：</p><blockquote><p>RewriteEngine on</p></blockquote><p><strong>RewriteCond 和 RewriteRule</strong> </p><p><strong>RewriteCond 和 RewriteRule</strong><br>表示指令定义和匹配一个规则条件，让RewriteRule来重写。说的简单点，RewriteCond就像我们程序中的if语句一样，表示如果符合某个或某几个条件则执行RewriteCond下面紧邻的RewriteRule语句，这就是RewriteCond最原始、基础的功能。</p><p>先看个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteCond  %&#123;HTTP_USER_AGENT&#125;  ^Mozilla//5/.0.*</div><div class="line">RewriteRule  index.php            index.m.php</div></pre></td></tr></table></figure><p>上面的匹配规则就是：如果匹配到http请求中HTTP_USER_AGENT 是 Mozilla//5/.0.* 开头的，也就是用FireFox浏览器访问index.php这个文件的时候，会自动让你访问到index.m.php这个文件。</p><p><strong>RewriteCond 和 RewriteRule 是上下对应的关系。可以有1个或者好几个RewriteCond来匹配一个RewriteRule</strong></p><p>RewriteCond一般是这样使用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RewriteCond %&#123;XXXXXXX&#125; + 正则匹配条件</div></pre></td></tr></table></figure><p>那么RewriteCond可以匹配什么样的数据请求呢？ </p><p>那么RewriteCond可以匹配什么样的数据请求呢？<br>它的使用方式是：<code>RewriteCond %{NAME_OF_VARIABLE} REGX</code> FLAG</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteCond %&#123;HTTP_REFERER&#125; (www.test.cn)</div><div class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125;  ^Mozilla//5/.0.*</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div></pre></td></tr></table></figure><p>上面是常见的3种最常见使用最多的<code>HTTP头连接与请求</code>匹配。</p><p><strong>HTTP_REFERER</strong> </p><p><strong>HTTP_REFERER</strong><br>这个匹配访问者的地址，php中$_REQUREST中也有这个，当我们需要判断或者限制访问的来源的时候，就可以用它。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteCond %&#123;HTTP_REFERER&#125; (www.test.cn)</div><div class="line">RewriteRule (.*)$ test.php</div></pre></td></tr></table></figure><p>上面语句的作用是如果你访问的上一个页面的主机地址是www.test.cn，则无论你当前访问的是哪个页面，都会跳转到对test.php的访问。</p><p>再比如，也可以利用 HTTP_REFERER <code>防倒链</code>，就是限制别人网站使用我网站的图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^$ [NC]</div><div class="line">RewriteCond %&#123;HTTP_REFERER&#125; !ww.iyangyi.com [NC]</div><div class="line">RewriteRule \.(jpg|gif) http://image.baidu.com/ [R,NC,L]</div></pre></td></tr></table></figure><p>NC nocase的意思，忽略大小写。第一句呢，是必须要有域名，第一句就是看域名如果不是 www.iyangyi.com 的，当访问.jpg或者.gif文件时候，就都会自动跳转到 <a href="http://image.baidu.com/" target="_blank" rel="external">http://image.baidu.com/</a> 上，很好的达到了防盗链的要求。</p><p><strong>REQUEST_FILENAME</strong> </p><p><strong>REQUEST_FILENAME</strong><br>这个基本是用的最多的，以为url重写是用的最多的，它是匹配当前访问的域名文件，那哪一块属于REQUEST_FILENAME 呢？是url 除了host域名外的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.rainleaves.com/html/1569.html?replytocom=265</div></pre></td></tr></table></figure><p>这个url，那么 REQUEST_FILENAME 就是 <code>html/1569.html?replytocom=265</code></p><p>看个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line">RewriteRule ^room/video/(\d+)\.html web/index\.php?c=room&amp;a=video&amp;r=$1 [QSA,NC,L]</div></pre></td></tr></table></figure><p><code>-d</code> 是否是一个目录. 判断TestString是否不是一个目录可以这样: <code>!-d</code> </p><p><code>-d</code> 是否是一个目录. 判断TestString是否不是一个目录可以这样: <code>!-d</code><br><code>-f</code> 是否是一个文件. 判断TestString是否不是一个文件可以这样: <code>!-f</code></p><p>这两句语句<code>RewriteCond</code>的意思是请求的文件或路径是不存在的，如果文件或路径存在将返回已经存在的文件或路径。一般是这样结合在一起用的。</p><p>上面<code>RewriteRule</code>正则的意思是以 room开头的 room/video/123.html 这样子，变成 web/index.php?c=room&amp;a=video&amp;r=123</p><p><code>$1</code> 表示匹配到的第一个参数。</p><h2 id="RewriteRule-写法和规则"><a href="#RewriteRule-写法和规则" class="headerlink" title="RewriteRule 写法和规则"></a>RewriteRule 写法和规则</h2><p>RewriteRule是配合RewriteCond一起使用，可以说，RewriteRule是RewriteCond成功匹配后的执行结果，所以，它是很重要的。</p><p>来看一下 <code>RewriteRule</code>的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RewriteRule Pattern Substitution [flags]</div></pre></td></tr></table></figure><p><code>Pattern</code>是一个正则匹配。<code>Substitution</code>是匹配的替换 <code>[flags]</code>是一些参数限制；</p><p>我们看几个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RewriteRule ^room/video/(\d+)\.html web/index\.php?c=room&amp;a=video&amp;r=$1 [QSA,NC,L]</div></pre></td></tr></table></figure><p>意思是 以 room开头的 room/video/123.html 这样子，变成 web/index.php?c=room&amp;a=video&amp;r=123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RewriteRule \.(jpg|gif) http://image.baidu.com/ [R,NC,L]</div></pre></td></tr></table></figure><p>意思是以为是访问.jpg或者gif的文件，都会调整到 <a href="http://image.baidu.com/" target="_blank" rel="external">http://image.baidu.com</a></p><p>所以，掌握正则级是关键所在了。以后，我会专门搞一个正则的篇章来学习下。</p><p>我们再看看<code>[flags]</code>是什么意思？</p><p>因为它太多了。我就挑几个最常用的来说说吧。</p><p><code>[QSA]</code> qsappend(追加查询字符串)的意思，次标记强制重写引擎在已有的替换字符串中追加一个查询字符串，而不是简单的替换。如果需要通过重写规则在请求串中增加信息，就可以使用这个标记。上面那个<code>room</code>的例子，就必须用它。</p><p><code>NC</code> nocase(忽略大小写)的意思，它使Pattern忽略大小写，也就是在Pattern与当前URL匹配时，”A-Z”和”a-z”没有区别。这个一般也会加上，因为我们的url本身就不区分大小写的。</p><p><code>R</code> redirect(强制重定向)的意思，适合匹配Patter后，Substitution是一个http地址url的情况，就调整出去了。上面那个调整到image.baidu.com的例子，就必须也用它。</p><p><code>L</code> last(结尾规则)的意思，就是已经匹配到了，就立即停止，不再匹配下面的Rule了，类似于编程语言中的<code>break</code>语法，跳出去了。</p><p>其他的一些具体的语法，可以参考以下资料：</p><p><a href="http://www.skygq.com/2011/02/21/apache%E4%B8%ADrewritecond%E8%A7%84%E5%88%99%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D%E8%BD%AC/" target="_blank" rel="external">http://www.skygq.com/2011/02/21/apache%E4%B8%ADrewritecond%E8%A7%84%E5%88%99%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D%E8%BD%AC/</a></p><p><a href="http://www.2cto.com/os/201201/116040.html" target="_blank" rel="external">http://www.2cto.com/os/201201/116040.html</a></p><p><a href="http://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html" target="_blank" rel="external">http://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html</a></p><h2 id="htaccess文件的使用"><a href="#htaccess文件的使用" class="headerlink" title=".htaccess文件的使用"></a>.htaccess文件的使用</h2><p><code>.htaccess</code>文件是啥呢？我们前面说了这么多的配置和修改，都是针对于apache的配置文件来修改的。.htaccess文件就是它的一个替代品。为啥呢？因为你每次修改apache的配置文件，都必须重启apache服务器，很麻烦不说，有些共享apache的服务器，你还没权限修改和重启apache。所以，.htaccess文件就应运而生了。（不用重启apache,是真的挺方便的）</p><p><code>.htaccess</code>分布式配置文件。它文件名字比较奇怪，没有文件名，只有一个文件后缀就是<code>.htaccess</code>。所以一般在windows下还没法新建这个文件，因为windows不允许文件名是空的，比较蛋疼。但是我相信你总归会有办法新建这个文件的。（在linux下新建一个，下载到windows中呗）</p><p><code>.htaccess</code>同时是一个针对目录的配置，你可以把它放到项目的根目录下，那么它就多整个项目其效果，如果你把它放到一个单独的子目录下，那么它就对这个子目录其效果了。</p><p><strong>.htaccess</strong>文件如何生效呢。上面讲配置的时候，我讲过了<code>AllowOverride All</code>这个配置，它就是启动<code>.htaccess</code>文件是否可以使用的。<code>AllowOverrideAll</code>表示可以。<code>AllowOverride None</code>表示禁止使用。还是蛮简单的。</p><p><strong>那.htaccess文件里的语法是怎么写额呢？</strong></p><p>其实和上面说的一模一样的写法。可以完全的搬过来用。没问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> &lt;Directory &quot;D:/wamp/www/testphp/&quot;&gt;</div><div class="line">    Options Indexes FollowSymLinks</div><div class="line">    AllowOverride All</div><div class="line">    Order Allow,Deny</div><div class="line">    Allow from all</div><div class="line">    RewriteEngine on</div><div class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line">    RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure><p>上面的apache的<code>`里的这一块就可以完全的搬到</code>.htaccess`文件中来，且效果一模一样。</p><p>上面就是vhost文件里面的配置的大致写法，其实httpd.conf里面也是这么写的，毕竟vhost最后还是包含到主配置文件里面。</p><p>documentroot 其实自己一直好奇为啥和directory参数一样其实本质上该项目文件夹下只有这个document root能访问，所以重写规则也好，针对的都是这个document root，导致了二者之间的相同。</p><p>有一点要注意的就是，如果通过开不同的端口号转发到不同的文件夹，需要早配置文件的开头写上Listen 127.0.0.1：8080 这样，开启端口号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于apache的配置文件。不管是xampp安装的lamp环境，还是自己在linux下面搭建的lamp环境，之前关于apache的配置都是直接copy网上的，用的虚拟域名，本质是还是不够理解的，关于.htaccess 也只是刚开始学习tp的时候看到过，后来因为配置虚拟域名能解决问题，就没有过多的了解这个.htaccess了。&lt;/p&gt;
    
    </summary>
    
      <category term="apache" scheme="http://yoursite.com/categories/apache/"/>
    
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Laravel ORM</title>
    <link href="http://yoursite.com/2018/03/30/Laravel-ORM/"/>
    <id>http://yoursite.com/2018/03/30/Laravel-ORM/</id>
    <published>2018-03-30T03:30:05.000Z</published>
    <updated>2018-03-30T07:57:06.921Z</updated>
    
    <content type="html"><![CDATA[<p>orm并不是一个新兴的概念，他出现很久了，只是刚开始学习的自己并没有接触到，他能帮我们少写很多代码，让我们能以更面向对象的方式来处理关于数据库的操作。</p><a id="more"></a><p>Eloquent 是laravel的orm，我们通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:model User</div></pre></td></tr></table></figure><p>生成的类虽然是继承Model，但本质上都是继承这个Eloquent，他把我们每张表看做一个类，表里面的数据看做一个实例，我们对其进行操作的时候，更类似于面向对象的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$user = User::find(1);</div><div class="line">$user-&gt;name = &apos;cy&apos;;</div><div class="line">$user-&gt;city = &apos;shanghai&apos;;</div><div class="line">$user-&gt;save();</div></pre></td></tr></table></figure><p>更便于理解。</p><p>生成的model很简单，大致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">class Article extends \Eloquent &#123;</div><div class="line"></div><div class="line">protected $fillable = [];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个fillable里面就是可以批量操作的字段，批量操作在我之前的文章里面有提到过，我觉得更通俗的理解是可更新的字段。只需要继承一下 Eloquent 类，就可以干 ‘first() find() where() orderBy()’ 等非常非常多的事情，这就是面向对象的强大威力。</p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan tinker</div></pre></td></tr></table></figure><p>可以开启一个交互环境进行orm的调试，其实我感觉不止是orm，别的代码也都是可以执行的，只是方便了orm的打印操作，能很方便的看到执行结果。有一点需要注意的就是tinker是基于当前代码的，如果代码重新修改来了，我们需要重启tinker来加载新的代码。</p><p>还有我们会利用composer安装laravel-debugbar，来进行orm的调试，当我发现在别的项目中使用不了这个插件的时候，我改变了对composer的看法，他安装的东西更类似于代码，而不是软件，我们如果要在不同的项目中也使用这个插件，我们同样需要在另一个项目目录线面进行composer安装</p><p>介绍几个常用的函数</p><ul><li><p>find()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">User::find(1)</div><div class="line">App\User &#123;#764</div><div class="line">     id: 1,</div><div class="line">     name: &quot;cy&quot;,</div><div class="line">     email: &quot;1967196626@qq.com&quot;,</div><div class="line">     created_at: &quot;2018-03-30 01:42:40&quot;,</div><div class="line">     updated_at: &quot;2018-03-30 01:59:51&quot;,</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>这个1是主键</p></li></ul><ul><li><p>first()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">User::where(&apos;id&apos;, &apos;&gt;&apos;, 1)-&gt;first()</div><div class="line">App\User &#123;#771</div><div class="line">     id: 2,</div><div class="line">     name: &quot;Bella Lebsack&quot;,</div><div class="line">     email: &quot;cristobal58@example.net&quot;,</div><div class="line">     created_at: &quot;2018-03-30 01:59:51&quot;,</div><div class="line">     updated_at: &quot;2018-03-30 01:59:51&quot;,</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>上面两个获取的内容都是对象，可以直接使用</p></li><li><p>get()  获取的是一个collection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> User::where(&apos;id&apos;, &apos;&gt;&apos;, 1)-&gt;where(&apos;id&apos;, &apos;&lt;&apos;, 3)-&gt;get()</div><div class="line">=&gt; Illuminate\Database\Eloquent\Collection &#123;#773</div><div class="line">     all: [</div><div class="line">       App\User &#123;#778</div><div class="line">         id: 2,</div><div class="line">         name: &quot;Bella Lebsack&quot;,</div><div class="line">         email: &quot;cristobal58@example.net&quot;,</div><div class="line">         created_at: &quot;2018-03-30 01:59:51&quot;,</div><div class="line">         updated_at: &quot;2018-03-30 01:59:51&quot;,</div><div class="line">       &#125;,</div><div class="line">     ],</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li><li><p>all() 获取的是一个collection</p></li></ul><p>​    all的使用好像不能加条件</p><p>​    上面的collection可以通过toArray() 方法转换成数组，但其实我们平时用的时候没用toArray也是可以的</p><p>上面需要注意的点就是：</p><ol><li>所有的中间方法如 ‘where()’ ‘orderBy()’ 等都能够同时支持 ‘静态’ 和 ‘非静态链式’ 两种方式调用，即 ‘Article::where()…’ 和 ‘Article::….-&gt;where()’。</li><li>所有的 ‘非固定用法’ 的调用最后都需要一个操作来 ‘收尾’，本片教程中有两个 ‘收尾操作’：’-&gt;get()’ 和 ‘-&gt;first()’。</li><li>每一个继承了 Eloquent 的类都有两个 ‘固定用法’ ‘Article::find($number)’ ‘Article::all()’，前者会得到一个带有数据库中取出来值的对象，后者会得到一个包含整个数据库的对象合集。</li></ol><p>Builder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Article::where(&apos;id&apos;, &apos;&gt;&apos;, 10)-&gt;where(&apos;id&apos;, &apos;&lt;&apos;, 20)-&gt;orderBy(&apos;updated_at&apos;, &apos;desc&apos;)-&gt;get();</div></pre></td></tr></table></figure><p>这段代码的 <code>::where()-&gt;where()-&gt;orderBy()</code> 就是Builder。用面向对象的方法来理解，可以总结成一句话：创建一个对象，并不断修改它的属性，最后用一个操作来触发数据库操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User::orderBy(&apos;id&apos;, &apos;desc&apos;);</div><div class="line">=&gt; Illuminate\Database\Eloquent\Builder &#123;#817&#125;</div></pre></td></tr></table></figure><p>这个get() 就是那个最后的方法。</p><p>值的思考的一个问题</p><blockquote><p>如果直接用 :: 来访问某个 function，无论这个 function 是否为 static，构造函数 __construct() 都不会被调用，那么创建对象是如何实现的呢？请看：<a href="https://github.com/illuminate/database/blob/master/Eloquent/Model.php#L3354" target="_blank" rel="external">https://github.com/illuminate/database/blob/master/Eloquent/Model.php#L3354</a></p></blockquote><p>所谓 “终结者” 方法，指的是在 N 个中间操作流方法对某个 Eloquent 对象进行加工以后，触发最终的数据库查询操作，得到返回值。</p><p><code>first()</code> <code>get()</code> <code>paginate()</code> <code>count()</code> <code>delete()</code> 是用的比较多的一些 “终结者” 方法，他们会在中间操作流的最后出现，把 SQL 打给数据库，得到返回数据，经过加工返回一个 Article 对象或者一群 Article 对象的集合。</p><p>all() 方法好像不是，因为all() 好像不能跟着条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> User::orderBy(&apos;id&apos;, &apos;desc&apos;)-&gt;all();</div><div class="line">BadMethodCallException with message &apos;Call to undefined method Illuminate\Database\Query\Builder::all()</div></pre></td></tr></table></figure><p>关系</p><p>1 对 1 关系</p><p>做了个试验，发现如果通过传统的生成迁移文件，生成model，进行数据填充真的挺麻烦的，不如在数据库中快速建表来的容易</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public function hasOne1()</div><div class="line">    &#123;</div><div class="line">        return $this-&gt;hasOne(TestOneToOne::class, &apos;user_id&apos;, &apos;id&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function belongsTo1()</div><div class="line">    &#123;</div><div class="line">        return $this-&gt;belongsTo(TestOneToOne::class, &apos;id&apos;, &apos;user_id&apos;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这是User 中的两个方法</p><p>User::with(‘hasOne1’)-&gt;find(1)</p><p>User::with(‘belongsTo1’)-&gt;find(1)</p><p>获取的数据是一样的，说一下我的记忆方法。hasOne 的时候，对方表中的字段在前面，belongsTo的时候自己表中的数据在前面。（我一般喜欢用with表示模型的结合）</p><p>还有第一个参数注意一下，话说这个::class出现好久了，而我却很少用，真的很方便哦。</p><p>还有默认的orm模型名称都是表名的单数，这个是一定要注意的哦。除非自己重新定义。（many 都能识别成功manies,牛逼）</p><p>1对多</p><p>这个时候的belongsTo 只有一种了，和上面的一样，hasMany() 和上面也类似。值的注意的一点就是那个表::with就成主体了，还有一点的就是使用with的时候并不是和我们传统的那种使用left join，而是先计算出主表，再根据主表中的数据，就算从表中对应数据in() 这个集合中，我不能理解的一点就是这样通过in，怎么完成了数据的连接。</p><p>多对多</p><p>这个时候经常需要第三张表来存储数据，值的注意的一点就是第三张表往往不需要生成model。</p><p>第三张表值记录对应关系，感觉默认的就是主键id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function belongsToMany1()</div><div class="line">    &#123;</div><div class="line">        return $this-&gt;belongsToMany(\App\User::class, &apos;test_many_to_many&apos;, &apos;user_id&apos;, &apos;test_id&apos;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>上面是一种我的粉丝，比如我是users 表中的一员，我的粉丝也是这张表中的数据，注意存储数据关系的表不要用::class，因为不存在这个class，还有如果要加where条件，里面的条件用调用主题的字段，比如users中的字段id。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;orm并不是一个新兴的概念，他出现很久了，只是刚开始学习的自己并没有接触到，他能帮我们少写很多代码，让我们能以更面向对象的方式来处理关于数据库的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="http://yoursite.com/categories/Laravel/"/>
    
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="orm" scheme="http://yoursite.com/tags/orm/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 数据填充</title>
    <link href="http://yoursite.com/2018/03/30/Laravel-%E6%95%B0%E6%8D%AE%E5%A1%AB%E5%85%85/"/>
    <id>http://yoursite.com/2018/03/30/Laravel-数据填充/</id>
    <published>2018-03-30T02:01:03.000Z</published>
    <updated>2018-03-30T06:41:23.787Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个phper，Laravel的学习是必不可少的，可是这个框架的学习成本还是挺大的，有些东西现在可能不明白，但至少记录下来，慢慢的成长。</p><a id="more"></a><p>在laravel的学习中，感觉挺好用的相比较于我们现在，数据填充是一个很不错的功能，能生成一大堆假的数据把页面填充起来，让他更有实际的样子。</p><p>数据填充，和数据库相关，自然去database下面。seeds目录，databaseseeder,这个文件主要是让我们在运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan db:seed</div></pre></td></tr></table></figure><p>的时候，执行哪些数据填充的文件，其参数可以让我们执行哪些填充文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public function run()</div><div class="line">    &#123;</div><div class="line">        // $this-&gt;call(UsersTableSeeder::class);</div><div class="line">        Model::unguard();</div><div class="line">        $this-&gt;call(UsersTableSeeder::class);</div><div class="line">        Model::reguard();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>上面就是基础的database seeder 里面的内容，前面两个主要是接触限制（官方叫批量赋值，就是默认model里面只有fileable的字段可以填充，为什么要规定这个呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public function create(Request $req)</div><div class="line">&#123;</div><div class="line">$this-validate($req, [</div><div class="line">  &apos;name&apos; =&gt; &apos;required|min:5&apos;,</div><div class="line">  &apos;password&apos; =&gt; &apos;required|confirmed&apos;</div><div class="line">  ···</div><div class="line">])</div><div class="line">$name = $req-&gt;name;</div><div class="line">$password = $req-&gt;password;</div><div class="line">User::create(compact(&apos;name&apos;, &apos;password&apos;));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样填充数据太麻烦了，比如我之前在itbasic上面填充数据，一个合同二十多个字段，这样往方法里面插入，一般这样</p><pre><code>public function create(Request $req){  $this-validate($req, [  &apos;name&apos; =&gt; &apos;required|min:5&apos;,          &apos;password&apos; =&gt; &apos;required|confirmed&apos;          ···  ])  User::create($req-&gt;all());}</code></pre><p>req的all方法获取的是一个关联数组，可是这样插入会导致一个问题，比如现在的表的字段的越来越规范了，比如admin字段 is_admin,这样当用户传入is_admin  1， 就完了，所以设置批量赋值，用来规定哪些字段可以传入，哪些字段不可以传入，filable 代表可以传入的，guard 代表这些不能传入。</p><p>当我们进行数据填充的时候，可能不需要字段限制，所以才会有了开始的解除限制和后面的开启限制。</p><p>接下来就是种子文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:seeder UsersTableSeeder</div></pre></td></tr></table></figure><p>也是只有一个run方法，这个UsersTableSeeder,只是命名规范，其实并不用，因为我们在写run方法的时候，就是在写普通的插入语句</p><pre><code>public function run(){  DB::table(&apos;articles&apos;)-&gt;delete();  for ($i=0; $i &lt; 10; $i++) {      \App\Article::create([          &apos;title&apos;   =&gt; &apos;Title &apos;.$i,          &apos;body&apos;    =&gt; &apos;Body &apos;.$i,          &apos;user_id&apos; =&gt; 1,      ]);  }}</code></pre><p>这种方法就太没有意义了，因为我们可以通过写一个接口，来进行插入，我们希望的是更真实的数据，laravel中一般使用的用工厂模式生成批量化的对象，然后进行数据填充。</p><p>查看database 下面的factory文件夹，</p><pre><code>factory-&gt;define(App\User::class, function(Faker faker) {  static $password;  return [      &apos;name&apos; =&gt; $faker-&gt;name,      &apos;email&apos; =&gt; $faker-&gt;unique()-&gt;safeEmail,      &apos;password&apos; =&gt; $password ?: $password = bcrypt(&apos;secret&apos;),      &apos;remember_token&apos; =&gt; str_random(10),  ];});</code></pre><p>这里面只是定一个一个model对象，然后在seeder里面批量化的生成这个对象<br>    public function run()<br>    {<br>        //<br>        factory(App\User::class)-&gt;times(50)-&gt;create();<br>        $user = App\User::find(1);<br>        $user-&gt;name = ‘cy’;<br>        $user-&gt;email = ‘1967196626@qq.com’;<br>        $user-&gt;password = bcrypt(‘123456’);<br>        $user-&gt;save();<br>    }<br>综上：</p><ol><li>通过factory ，定义批量化的实例对象。</li><li>通过seeder 去实例化生成对象，然后插入数据库中。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个phper，Laravel的学习是必不可少的，可是这个框架的学习成本还是挺大的，有些东西现在可能不明白，但至少记录下来，慢慢的成长。&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="http://yoursite.com/categories/Laravel/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>PHP闭包</title>
    <link href="http://yoursite.com/2018/03/26/PHP%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/03/26/PHP闭包/</id>
    <published>2018-03-26T14:10:03.000Z</published>
    <updated>2018-03-26T14:11:30.145Z</updated>
    
    <content type="html"><![CDATA[<p>咱是写PHP的，可是PHP的很多特性咱都不是很熟，比如trait，闭包，咱不能只局限于表单的操作，不能只局限于面向过程的写法，记录下来那些年很少接触的特性。就从PHP的 <strong>闭包</strong> 开始咯<br><a id="more"></a></p><p>第一次接触闭包还是在js中，后来是在python中，最后才是php中！！!深刻的怀疑我是不是做php的。<br>php中闭包和js中还是不一样的，php中把匿名函数和闭包混为一谈，这让开始只知道js闭包的我好蛋疼，因为比如array_map 中经常写的回调（注意回调只是一种动作，匿名函数闭包或者是自定义函数只是实现回调的不同方法），还有最近很火的swoole，因为是异步的嘛，所以写了大量的回调函数，所以也属于闭包 ，虽然js和php的闭包有些不同但本质上还是封装函数的运行环境。<br>js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function out() &#123;</div><div class="line">        var a = 1;</div><div class="line">        var b = function(name) &#123;</div><div class="line">            console.log(a);</div><div class="line">            console.log(name)</div><div class="line">        &#125;</div><div class="line">        return b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var a = 2;</div><div class="line">    var name = &apos;cy&apos;;</div><div class="line">    var c= out();</div><div class="line">    c(name);</div></pre></td></tr></table></figure></p><p>上面这段代码虽然简单，但是包含了几个重要的知识点：</p><ol><li>js的闭包主要是靠两层函数的嵌套，然后通过调用外层的函数返回内层的函数，内层的函数可以调用外层函数中的变量，内层函数的执行可以通过后来调用的时候传入参数。</li></ol><p>php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Foo</div><div class="line">&#123;</div><div class="line">    public function __call($method, $args)</div><div class="line">    &#123;</div><div class="line">        if(is_callable([$this, $method])) &#123;</div><div class="line">            return call_user_func_array($this-&gt;$method, $args);</div><div class="line">        &#125;</div><div class="line">        // else throw exception</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = new Foo(&apos;Sam&apos;);</div><div class="line">$obj-&gt;say = function () &#123;</div><div class="line">    return &apos;Hello World&apos;;</div><div class="line">&#125;;</div><div class="line">echo($obj-&gt;say());</div></pre></td></tr></table></figure></p><p>当执行的say() 方法不存在的时候会自动执行<strong>call方法，然后method 传入是say方法，这里面args 因为是空，所以自动传入为空。<br>is_callable 方法判断这个$obj 实例中是否有这个方法，因为后面有定义$obj-&gt;say ,所以会自动调用。<br>call_user_func_array 会把前面这个$this-&gt;method 执行，后面args是传入的参数，相比较js就多了</strong>call() 部分。<br>上面还有一点没体现出来就是，闭包可以引用的变量是自己定义时候的父亲变量，js中可以直接在函数中使用，但是php中要用use关键字引入。</p><p>后来的php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Foo</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = new Foo(&apos;Sam&apos;);</div><div class="line">$obj-&gt;say = function () &#123;</div><div class="line">    return &apos;Hello World&apos;;</div><div class="line">&#125;;</div><div class="line">echo($obj-&gt;say-&gt;__invoke());</div></pre></td></tr></table></figure></p><p>因为php的闭包都是一个closure类，而invoke 是这个类除了（construct 不能实例化，bind bindto 绑定方法之外的一个方法）。<br>但是这个类中不能使用this关键字，主要是这个this指代的是closure自身，因为js中this关键字老变，虽然这都被别人诟病，但相比较于php，他还需要手动绑定呢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Foo</div><div class="line">&#123;</div><div class="line">    private $name;</div><div class="line"></div><div class="line">    function __construct($name)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = new Foo(&apos;Sam&apos;);</div><div class="line"></div><div class="line">$cl = function() &#123;</div><div class="line">    return &quot;Hello &quot; . $this-&gt;name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$cl = $cl-&gt;bindTo($obj, $obj);</div><div class="line">echo($cl());</div></pre></td></tr></table></figure></p><blockquote><p>我們不再執著該closure一定要動態成為 $obj的method，但要存取$obj property的目標不變，程式也不變，一樣使用$this。<br>假如我們能將$obj以手動注入的方式，讓closure內部的$this改指向$obj，我們就能達到如JavaScript的效果了。<br>$cl = $cl-&gt;bindTo($obj, $obj);<br>bindTo()如同__invoke()一樣，是closure物件內建的method，它的目的就是讓我們能手動注入一個物件，讓closure物件的$this指向手動注入的物件$obj。<br>因為在closure中我們有$this-&gt;name，經過bindTo()去手動注入 $obj後，$this已經改指向$obj，所以$this-&gt;name就相當於$obj-&gt;name。<br>根據bindTo()文件 :<br>若要讓closure物件只能存取其他物件的public變數，只傳第1個參數即可。<br>若要讓closure物件存取其他物件的private或protected變數，就要傳第2個參數。<br>bindTo()對於第2個參數的要求不嚴，有幾種傳法 :<br>傳進欲存取物件的class名稱，是字串。<br>傳進欲存取的物件也可以，bindTo()會自動得知該物件的class名稱。<br>在此就一併傳進與第一個參數相同的$obj。<br>echo($cl());<br>因為$obj已經透過bindTo() 手動注入進$cl()，此時$this已經指向$obj，所以執行$cl()就可順利存$obj的property</p></blockquote><p>Modern PHP<br>中对php闭包的重要方法bindTo的解释(注意闭包closure的bindTo方法本身是三个参数的，但因为第一个参数是闭包自身，所以经常$this-&gt;bindTo(arg1,arg2)这样去掉用）。</p><p>接下来我们来看看bindTo方法，通过该方法，我们可以把闭包的内部状态绑定到其他对象上。这里bindTo方法的第二个参数显得尤为重要，其作用是指定绑定闭包的那个对象所属的PHP类，这样，闭包就可以在其他地方访问绑定闭包的对象中受保护和私有的成员变量。<br>你会发现，PHP框架经常使用bindTo方法把路由URL映射到匿名回调函数上，框架会把匿名回调函数绑定到应用对象上，这样在匿名函数中就可以使用$this关键字引用重要的应用对象：<br>class App {<br>    protected $routes = [];<br>    protected $responseStatus = ‘200 OK’;<br>    protected $responseContentType = ‘text/html’;<br>    protected $responseBody = ‘Hello World’;</p><pre><code>public function addRoute($path, $callback) {    $this-&gt;routes[$path] = $callback-&gt;bindTo($this, __CLASS__);}public function dispatch($path) {    foreach ($this-&gt;routes as $routePath =&gt; $callback) {        if( $routePath === $path) {            $callback();        }    }    header(&apos;HTTP/1.1 &apos; . $this-&gt;responseStatus);    header(&apos;Content-Type: &apos; . $this-&gt;responseContentType);    header(&apos;Content-Length: &apos; . mb_strlen($this-&gt;responseBody));    echo $this-&gt;responseBody;}</code></pre><p>}<br>这里我们需要重点关注addRoute方法，这个方法的参数分别是一个路由路径和一个路由回调，dispatch方法的参数是当前HTTP请求的路径，它会调用匹配的路由回调。第9行是重点所在，我们将路由回调绑定到了当前的App实例上。这么做能够在回调函数中处理App实例的状态：<br>$app = new App();<br>$app-&gt;addRoute(‘/user’, function(){<br>    $this-&gt;responseContentType = ‘application/json;charset=utf8’;<br>    $this-&gt;responseBody = ‘世界你好’;<br>});<br>$app-&gt;dispatch(‘/user’)</p><p>总结一下，闭包的bindTo方法的根本原因是闭包中$this关键字指向了自己，而不是指向某一个对象。</p><p>Laravel<br>中对闭包的使用<br>IoC 容器<br>匿名函数可以从父作用域继承变量，而这个父作用域是定义该闭包的函数（不一定是调用它的函数）。<br>利用这个特性，我们可以实现一个简单的控制反转IoC容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class Container</div><div class="line">&#123;</div><div class="line">    protected static $bindings;</div><div class="line"> </div><div class="line">    public static function bind($abstract, Closure $concrete)</div><div class="line">    &#123;</div><div class="line">        static::$bindings[$abstract] = $concrete;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static function make($abstract)</div><div class="line">    &#123;</div><div class="line">        return call_user_func(static::$bindings[$abstract]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">class talk</div><div class="line">&#123;</div><div class="line">    public function greet($target)</div><div class="line">    &#123;</div><div class="line">        echo &apos;Hello &apos; . $target-&gt;getName();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class A</div><div class="line">&#123;</div><div class="line">    public function getName()</div><div class="line">    &#123;</div><div class="line">        return &apos;World&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 创建一个talk类的实例</div><div class="line">$talk = new talk();</div><div class="line"> </div><div class="line">// 将A类绑定至容器，命名为foo</div><div class="line">Container::bind(&apos;foo&apos;, function() &#123;</div><div class="line">    return new A;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">// 通过容器取出实例</div><div class="line">$talk-&gt;greet(Container::make(&apos;foo&apos;)); // Hello World</div></pre></td></tr></table></figure></p><p>上述例子中，只有在通过make方法获取实例的时候，实例才被创建，这样使得我们可以实现容器。<br>在Laravel框架底层也大量使用了闭包以及bindTo方法，利用好闭包可以实现更多的高级特性如事件触发等。</p><p>laravel中的控制反转还不是很熟，以后多了解下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;咱是写PHP的，可是PHP的很多特性咱都不是很熟，比如trait，闭包，咱不能只局限于表单的操作，不能只局限于面向过程的写法，记录下来那些年很少接触的特性。就从PHP的 &lt;strong&gt;闭包&lt;/strong&gt; 开始咯&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>PHP魔术方法和魔术变量</title>
    <link href="http://yoursite.com/2018/03/26/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%92%8C%E9%AD%94%E6%9C%AF%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/03/26/PHP魔术方法和魔术变量/</id>
    <published>2018-03-26T07:36:28.000Z</published>
    <updated>2018-03-26T10:57:55.035Z</updated>
    
    <content type="html"><![CDATA[<p>有些东西如果不是经常使用，很容易忘记，比如魔术方法和魔术常量。<br>最主要是当看一些基本原理的代码的时候经常用到，比如闭包的时候，希望自己在学习过程中能对文章中的内容进行补充，改造，而不是单纯的靠这些简单例子来记忆&gt;</p><a id="more"></a><h2 id="魔术方法-Magic-methods"><a href="#魔术方法-Magic-methods" class="headerlink" title="魔术方法(Magic methods)"></a>魔术方法(Magic methods)</h2><p>PHP中把以两个下划线<code>__</code>开头的方法称为魔术方法，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：</p><ul><li><code>__construct()</code>，类的构造函数</li><li><code>__destruct()</code>，类的析构函数</li><li><code>__call()</code>，在对象中调用一个不可访问方法时调用</li><li><code>__callStatic()</code>，用静态方式中调用一个不可访问方法时调用</li><li><code>__get()</code>，获得一个类的成员变量时调用</li><li><code>__set()</code>，设置一个类的成员变量时调用</li><li><code>__isset()</code>，当对不可访问属性调用<code>isset()</code>或<code>empty()</code>时调用</li><li><code>__unset()</code>，当对不可访问属性调用<code>unset()</code>时被调用。</li><li><code>__sleep()</code>，执行<code>serialize()</code>时，先会调用这个函数</li><li><code>__wakeup()</code>，执行<code>unserialize()</code>时，先会调用这个函数</li><li><code>__toString()</code>，类被当成字符串时的回应方法</li><li><code>__invoke()</code>，调用函数的方式调用一个对象时的回应方法</li><li><code>__set_state()</code>，调用<code>var_export()</code>导出类时，此静态方法会被调用。</li><li><code>__clone()</code>，当对象复制完成时调用</li></ul><h3 id="construct-和-destruct"><a href="#construct-和-destruct" class="headerlink" title="__construct()和__destruct()"></a><code>__construct()</code>和<code>__destruct()</code></h3><p>构造函数和析构函数应该不陌生，他们在对象创建和消亡时被调用。例如我们需要打开一个文件，在对象创建时打开，对象消亡时关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">class FileRead</div><div class="line">&#123;</div><div class="line">    protected $handle = NULL;</div><div class="line"></div><div class="line">    function __construct()&#123;</div><div class="line">        $this-&gt;handle = fopen(...);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function __destruct()&#123;</div><div class="line">        fclose($this-&gt;handle);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>这两个方法在继承时可以扩展，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">class TmpFileRead extends FileRead</div><div class="line">&#123;</div><div class="line">    function __construct()&#123;</div><div class="line">        parent::__construct();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function __destruct()&#123;</div><div class="line">        parent::__destruct();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h3 id="call-和-callStatic"><a href="#call-和-callStatic" class="headerlink" title="__call()和__callStatic()"></a><code>__call()</code>和<code>__callStatic()</code></h3><p>在对象中调用一个不可访问方法时会调用这两个方法，后者为静态方法。这两个方法我们在可变方法（Variable functions）调用中可能会用到。<br>这个方法和is_callable经常配合调用，注意是callable，不是callback， 不是回调。<br>callback 回调更多的可以理解成一种使用方式，而匿名函数则是用来满足这种使用方式的一种途径，还有别的方式能满足callback,比如直接定义一个函数，传入函数的名称（字符串，如果是匿名函数的话，要把这个匿名函数对应的变量传进去，二者还是有些不同的），只是这种方式使用起来比较麻烦，比较少而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class MethodTest </div><div class="line">&#123;</div><div class="line">    public function __call ($name, $arguments) &#123;</div><div class="line">        echo &quot;Calling object method &apos;$name&apos; &quot;. implode(&apos;, &apos;, $arguments). &quot;\n&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static function __callStatic ($name, $arguments) &#123;</div><div class="line">        echo &quot;Calling static method &apos;$name&apos; &quot;. implode(&apos;, &apos;, $arguments). &quot;\n&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = new MethodTest;</div><div class="line">$obj-&gt;runTest(&apos;in object context&apos;);</div><div class="line">MethodTest::runTest(&apos;in static context&apos;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h3 id="get-，-set-，-isset-和-unset"><a href="#get-，-set-，-isset-和-unset" class="headerlink" title="__get()，__set()，__isset()和__unset()"></a><code>__get()</code>，<code>__set()</code>，<code>__isset()</code>和<code>__unset()</code></h3><p>当get/set一个类的成员变量时调用这两个函数。例如我们将对象变量保存在另外一个数组中，而不是对象本身的成员变量<br>var_dump($this-&gt;aa)<br>$this-&gt;aa = ‘pp’<br>isset($this-&gt;aa)<br>empty($this-&gt;aa)<br>值的注意的是 isset 和 empty 触发的魔术方法好像只能返回true和false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">class MethodTest</div><div class="line">&#123;</div><div class="line">    private $data = array();</div><div class="line"></div><div class="line">    public function __set($name, $value)&#123;</div><div class="line">        $this-&gt;data[$name] = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __get($name)&#123;</div><div class="line">        if(array_key_exists($name, $this-&gt;data))</div><div class="line">            return $this-&gt;data[$name];</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __isset($name)&#123;</div><div class="line">        return isset($this-&gt;data[$name])</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function unset($name)&#123;</div><div class="line">        unset($this-&gt;data[$name]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><h3 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep()和__wakeup()"></a><code>__sleep()</code>和<code>__wakeup()</code></h3><p>当我们在执行<code>serialize()</code>和<code>unserialize()</code>时，会先调用这两个函数。例如我们在序列化一个对象时，这个对象有一个数据库链接，想要在反序列化中恢复链接状态，则可以通过重构这两个函数来实现链接的恢复。（还没有用到过）例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Connection </div><div class="line">&#123;</div><div class="line">    protected $link;</div><div class="line">    private $server, $username, $password, $db;</div><div class="line"></div><div class="line">    public function __construct($server, $username, $password, $db)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;server = $server;</div><div class="line">        $this-&gt;username = $username;</div><div class="line">        $this-&gt;password = $password;</div><div class="line">        $this-&gt;db = $db;</div><div class="line">        $this-&gt;connect();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private function connect()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;link = mysql_connect($this-&gt;server, $this-&gt;username, $this-&gt;password);</div><div class="line">        mysql_select_db($this-&gt;db, $this-&gt;link);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __sleep()</div><div class="line">    &#123;</div><div class="line">        return array(&apos;server&apos;, &apos;username&apos;, &apos;password&apos;, &apos;db&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __wakeup()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;connect();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a><code>__toString()</code></h3><p>对象当成字符串时的回应方法。例如使用<code>echo $obj;</code>来输出一个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// Declare a simple class</div><div class="line">class TestClass</div><div class="line">&#123;</div><div class="line">    public function __toString() &#123;</div><div class="line">        return &apos;this is a object&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$class = new TestClass();</div><div class="line">echo $class;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>这个方法只能返回字符串，而且不可以在这个方法中抛出异常，否则会出现致命错误。</p><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a><code>__invoke()</code></h3><p>调用函数的方式调用一个对象时的回应方法。如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class CallableClass </div><div class="line">&#123;</div><div class="line">    function __invoke() &#123;</div><div class="line">        echo &apos;this is a object&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$obj = new CallableClass;</div><div class="line">var_dump(is_callable($obj));</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h3 id="set-state"><a href="#set-state" class="headerlink" title="__set_state()"></a><code>__set_state()</code></h3><p>调用<code>var_export()</code>导出类时，此静态方法会被调用。注意var_dump很强大，直接输出了，并不会触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class A</div><div class="line">&#123;</div><div class="line">    public $var1;</div><div class="line">    public $var2;</div><div class="line"></div><div class="line">    public static function __set_state ($an_array) &#123;</div><div class="line">        $obj = new A;</div><div class="line">        $obj-&gt;var1 = $an_array[&apos;var1&apos;];</div><div class="line">        $obj-&gt;var2 = $an_array[&apos;var2&apos;];</div><div class="line">        return $obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = new A;</div><div class="line">$a-&gt;var1 = 5;</div><div class="line">$a-&gt;var2 = &apos;foo&apos;;</div><div class="line">var_dump(var_export($a));</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a><code>__clone()</code></h3><p>当对象复制完成时调用。例如在<a href="http://yansu.org/2014/04/19/sigleton-design-pattern.html" target="_blank" rel="external">设计模式详解及PHP实现：单例模式</a>一文中提到的单例模式实现方式，利用这个函数来防止对象被克隆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">public class Singleton &#123;</div><div class="line">    private static $_instance = NULL;</div><div class="line"></div><div class="line">    // 私有构造方法 </div><div class="line">    private function __construct() &#123;&#125;</div><div class="line"></div><div class="line">    public static function getInstance() &#123;</div><div class="line">        if (is_null(self::$_instance)) &#123;</div><div class="line">            self::$_instance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        return self::$_instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 防止克隆实例</div><div class="line">    public function __clone()&#123;</div><div class="line">        die(&apos;Clone is not allowed.&apos; . E_USER_ERROR);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h2 id="魔术常量-Magic-constants"><a href="#魔术常量-Magic-constants" class="headerlink" title="魔术常量(Magic constants)"></a>魔术常量(Magic constants)</h2><p>PHP中的常量大部分都是不变的，但是有8个常量会随着他们所在代码位置的变化而变化，这8个常量被称为魔术常量。</p><ul><li><code>__LINE__</code>，文件中的当前行号</li><li><code>__FILE__</code>，文件的完整路径和文件名</li><li><code>__DIR__</code>，文件所在的目录</li><li><code>__FUNCTION__</code>，函数名称</li><li><code>__CLASS__</code>，类的名称</li><li><code>__TRAIT__</code>，Trait的名字</li><li><code>__METHOD__</code>，类的方法名</li><li><code>__NAMESPACE__</code>，当前命名空间的名称</li></ul><p>这些魔术常量常常被用于获得当前环境信息或者记录日志。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些东西如果不是经常使用，很容易忘记，比如魔术方法和魔术常量。&lt;br&gt;最主要是当看一些基本原理的代码的时候经常用到，比如闭包的时候，希望自己在学习过程中能对文章中的内容进行补充，改造，而不是单纯的靠这些简单例子来记忆&amp;gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>PHP函数</title>
    <link href="http://yoursite.com/2018/03/26/PHP%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/03/26/PHP函数/</id>
    <published>2018-03-26T06:12:29.000Z</published>
    <updated>2018-03-26T14:19:30.258Z</updated>
    
    <content type="html"><![CDATA[<p>工作的久了，反而基本功没有原先好了，也许要记得东西很多，内存中不够放置那些无规律的参数位置，但至少不要混淆哪些是框架自带的，哪些是PHP原生的。</p><a id="more"></a><p>一年多了，重复相同的工作可能让之前很多学会的但没用到的PHP函数忘记了，但这些在modern PHP 中，在新的环境中可能都是很重要的，记录下来。<br><!--more--></p><ol><li>string</li></ol><ul><li>str_repeat（’cy’, 10） //把cy这个字符串重复10次</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var_dump(str_repeat（&apos;cy&apos;, 10）)   //注意一定要打印，这个函数的作用只是构成一个字符串</div></pre></td></tr></table></figure><ul><li>var_dump 和 var_export<br>先来说下以后的使用都是使用var_dump,而不要使用var_export,因为第一个已经很强大了。<br>var_dump 可以输出数据类型，但是var_export不可以。<br>var_export 第二个参数给true, 他会把这个变量的值存储起来，可以用于赋值，但是当变量是resource的时候，返回的总是null,但是此时var_dump 虽然也不能打印出来，但是能<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">resource(2) of type (stream) </div><div class="line">NULL</div><div class="line">$a = var_export([2,3], true);</div></pre></td></tr></table></figure></li></ul><p>综上，用var_dump</p><ol><li>面向对象</li></ol><p>is_callable()与method_exists()     //method_exists 只能判断方法是否存在，但如果比如父类的方法是protected这种，没权利执行也会返回true，这种情况就得callable了，他会返回false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Foo &#123;</div><div class="line">    public function PublicMethod()&#123;&#125;</div><div class="line">    private function PrivateMethod()&#123;&#125;</div><div class="line">    public static function PublicStaticMethod()&#123;&#125;</div><div class="line">    private static function PrivateStaticMethod()&#123;&#125;</div><div class="line">&#125;</div><div class="line">$foo = new Foo();</div><div class="line">$callbacks = array(</div><div class="line">    array($foo, &apos;PublicMethod&apos;),</div><div class="line">    array($foo, &apos;PrivateMethod&apos;),</div><div class="line">    array($foo, &apos;PublicStaticMethod&apos;),</div><div class="line">    array($foo, &apos;PrivateStaticMethod&apos;),</div><div class="line">    array(&apos;Foo&apos;, &apos;PublicMethod&apos;),</div><div class="line">    array(&apos;Foo&apos;, &apos;PrivateMethod&apos;),</div><div class="line">    array(&apos;Foo&apos;, &apos;PublicStaticMethod&apos;),</div><div class="line">    array(&apos;Foo&apos;, &apos;PrivateStaticMethod&apos;),</div><div class="line">   );</div><div class="line">foreach ($callbacks as $callback)&#123;</div><div class="line">    var_dump($callback);</div><div class="line">    var_dump(method_exists($callback[0], $callback[1]));</div><div class="line">    var_dump(is_callable($callback));</div><div class="line">    echo str_repeat(&apos;-&apos;, 10);</div><div class="line">    echo &apos;&lt;br /&gt;&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作的久了，反而基本功没有原先好了，也许要记得东西很多，内存中不够放置那些无规律的参数位置，但至少不要混淆哪些是框架自带的，哪些是PHP原生的。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>PHP知识点</title>
    <link href="http://yoursite.com/2018/03/26/PHP%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/03/26/PHP知识点/</id>
    <published>2018-03-26T06:08:38.000Z</published>
    <updated>2018-03-26T14:22:12.108Z</updated>
    
    <content type="html"><![CDATA[<p>PHP中很多稍微高级的知识点自己都不是很熟悉，trait, 闭包，又或者composer等， 记录下来，成为现代phper。</p><a id="more"></a><ol><li><a href="https://chenye2017.github.io/2018/03/26/PHP%E9%97%AD%E5%8C%85/#more" target="_blank" rel="external">PHP中闭包</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP中很多稍微高级的知识点自己都不是很熟悉，trait, 闭包，又或者composer等， 记录下来，成为现代phper。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>hi , swoole</title>
    <link href="http://yoursite.com/2018/03/23/hi-swoole/"/>
    <id>http://yoursite.com/2018/03/23/hi-swoole/</id>
    <published>2018-03-23T06:02:40.000Z</published>
    <updated>2018-03-24T07:15:07.336Z</updated>
    
    <content type="html"><![CDATA[<p>学习目的：想让自己从增删改查，做web，表单的生活中调出来。</p><a id="more"></a><ol><li>swoole的安装</li></ol><p>swoole作为PHP的一个扩展，用c语言开发，在使用他之前我们当然需要有php的基础环境。这里我们并不需要传统的lamp或者lnmp的架构，仅仅只要安装好php就行了。网上都说php最好编译安装，虽然我倒现在还不知道编译安装的好处，我看慕课上的那个教程也仅仅只是指定了php的安装文件夹。<br>首先要搭建我们的虚拟环境，强烈推荐vagrant，真的很方便，虽然他把镜像都放在了c盘，我也懒得改了，但其实自己平时练习的话一个镜像就够了，剩下的只要操作这个镜像就好了，我用的centos7。<br>安装好vagrant和vitrual box后去网上找镜像吧，<a href="http://www.vagrantbox.es/" target="_blank" rel="external">http://www.vagrantbox.es/</a>,挺快的，详细说明也有，我是先用迅雷下载到本地，然后再添加的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vagrant box add centos7   d:/centos7.box      //把这个box文件装到系统中，之后这个box文件可以直接删除</div><div class="line">vagrant box list     //查看系统中是否有这个box文件的镜像</div><div class="line">vagrant box remove centos7   //如果这个镜像没用了，可以直接移除，节约c盘空间</div></pre></td></tr></table></figure></p><p>加入镜像后，就是去一个文件夹装载你的虚拟环境，他的底层是操作virtual box嘛，我的感觉就是和vitrual box那样找个文件夹存储这个虚拟环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">d:</div><div class="line">cd virtual                       //这是我平时虚拟环境统一放置的目录</div><div class="line">mkdir centos7             //为了区别开，这是我这次试验放置的目录，centos7代表镜像的名称</div><div class="line">cd centos7</div><div class="line">vagrant init centos7  //初始化虚拟环境，后面这个是上面添加进系统的镜像名称（这时候文件夹会生成vagrant的虚拟环境）</div><div class="line">修改vagrant file      //配置共享文件夹，开启ip地址</div><div class="line">vagrant up   //启动虚拟机（会重启加载上面配置文件的内容）</div></pre></td></tr></table></figure></p><p>几个命令很长时间使用哦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vagrant halt    //关闭虚拟机</div><div class="line">vagrant suspend  //挂起虚拟机</div><div class="line">vagrant resume  //唤醒虚拟机，对应上面的挂起，这样就不用每次启动了，就和linux永不关机都可以一样</div><div class="line">vagrant destroy  //摧毁虚拟机，没用的即使删除，虽然感觉也不占多大地方</div><div class="line">vagrant reload //这个我用的不多，主要是不记得他是否会重新加载配置文件了</div></pre></td></tr></table></figure></p><p>上面的一些坑就是：</p><ol><li>把镜像纳入系统的时候，默认会放在c盘，virtual box 也有些文件放在c盘，导致c盘越来越小。</li><li>加入镜像的时候，镜像的名称最好取得有点意义，比如ubuntu1604 这种，以后用起来的时候方便，时间长了，自己都忘记了。</li><li>不要用ubuntu16.04这种，之前用过这种，虽然添加镜像的时候没有啥问题，但是后面启动虚拟机的时候会报错。</li><li>挂载文件夹的问题。之前下载了ubuntu的box文件和centos56 的box文件，ubuntu能挂载上，centos挂载不上，网上说是vitrualbox的原因，可我都升级到2.0了都没法解决，仔细看了报错信息，说可能是这个box文件的问题。后来新下载了centos7的box文件，reslove。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant ssh  //进入虚拟机，注意要在上面建立的装载虚拟环境的文件夹下使用</div></pre></td></tr></table></figure><p>上面就是基础环境的搭建，可以理解成系统的搭建，剩下的就要我们去虚拟机中进行处理了。</p><p>首先是php的编译安装<br><a href="https://segmentfault.com/a/1190000004123048#articleHeader0" target="_blank" rel="external">这篇文章里面写的很清楚</a>，源码是我去php.net上面下载的。然后去swoole.php上面下载swoole的源码。phpize,这是php源码编译后的一个命令，按照上面那篇博客应该是在/usr/loca/php7/bin 下面，这是因为swoole的源码包下面没有configure文件，产生后./configure,可能会报找不到php-configure,注意这里面不是php 的配置文件，而是php7那个文件夹bin命令下面有个php-configure，直接写这个地址就可以了。</p><p>遇到的坑。编译出错，直接执行make，显示找不到configure文件，··其实./configure那时候就报错了，我不知道，直接执行make，然后显示找不到目标，注意一下报错信息，其实这些编译的时候都没什么错误，或者把错误信息粘贴去百度google，很容出来。<br>注意要在php.ini 里面开启扩展 extension=swoole<br>因为我们这没有lamp环境嘛，不要想着在页面访问phpinfo,直接php -m,查看加载的扩展。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习目的：想让自己从增删改查，做web，表单的生活中调出来。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="swoole" scheme="http://yoursite.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>自己的http记录</title>
    <link href="http://yoursite.com/2018/03/07/%E8%87%AA%E5%B7%B1%E7%9A%84http%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/03/07/自己的http记录/</id>
    <published>2018-03-07T09:49:37.000Z</published>
    <updated>2018-04-01T02:46:23.845Z</updated>
    
    <content type="html"><![CDATA[<p>上周老师让我们写一个关于http的总结，记录下这些天来的自己关于http的认识。</p><a id="more"></a><p>1.http请求动作</p><p>移动互联网时代，不像之前web时代，实现了前后端的分离，前端请求后端接口从之前基于soap变成调用基于rest的restul api接口，restful api是基于资源，他对于不同的http请求方式有不同的含义，最常见的get，post，put，delete, option,。传统的get和post区别主要是一个是url明文传递，另一个是加密后传递更安全。但是restful api中常见的4中请求动作分别代表一下含义<br>get ： 对于资源的请求<br>post ： 对于资源的创建<br>put ： 对于资源的更新<br>delete ： 对于资源的删除<br>例如 : get  /users/1  代表获取用户1的信息<br>post /users/1 创建<br>put /users/1  更新<br>delete /users/1  删除<br>这样的好处之一就是更有利于语义化，而且更能指定统一的标准, 比如laravel里面Route的resource方法就能根据资源users统一生成一堆的url，而不是通过不同的方法名来区分。<br>但比如传统表单提交只能实现get 和 post方式，如果我们直接修改提交方式会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;/posts/62&quot; method=&quot;POST&quot;&gt;</div></pre></td></tr></table></figure><p>我们只需要在里面增加一个隐藏的input<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</div></pre></td></tr></table></figure></p><p>就可以改变原先的form表单提交方式了</p><p>2.content-type的作用</p><ul><li><p>对于接口返回数据的处理</p><p>以python flask为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from flask import Flask, make_response</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/hello&apos;)</div><div class="line">def hello():</div><div class="line">    response = make_response(&apos;&lt;html&gt;&lt;/html&gt;&apos;)</div><div class="line">    return response</div><div class="line"></div><div class="line">app.run(host=&apos;0.0.0.0&apos;, debug=True)</div></pre></td></tr></table></figure><p>默认浏览器是按照html的格式解析的，上面当我们访问/hello的时候输出是空，因为html标签里面什么也没有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/hello&apos;)</div><div class="line">def hello():</div><div class="line">    headers = &#123;</div><div class="line">        &apos;content-type&apos;:&apos;text/plain&apos;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    response = make_response(&apos;&lt;html&gt;&lt;/html&gt;&apos;)</div><div class="line">    return response</div><div class="line">app.run(host=&apos;0.0.0.0&apos;, debug=True)</div></pre></td></tr></table></figure><p>但这样就能输出 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;&lt;/html&gt;</div></pre></td></tr></table></figure><p>因为我们让浏览器按照字符串的形式来解析</p><p>itbasic中也对header信息做了设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$response-&gt;header(&apos;Content-Type&apos;, &apos;text/json&apos;);</div><div class="line">        $response-&gt;header(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;);</div><div class="line">        return json_encode($res);</div></pre></td></tr></table></figure><p>这就是为什么我们每次调用接口的时候返回的都是json数据的原因</p><p>但是当我们输出模板的时候，观察控制台返回的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type: text/html; charset=UTF-8</div></pre></td></tr></table></figure><p>应该是模板在哪里进行了处理</p></li></ul><ul><li>常见的输出图片</li></ul><p>content-type 属于返回内容的一部分，主要是用来告诉浏览器返回的数据应该怎么解析，比如你访问 homestead.app/1.jpg,并不是根据文件的后缀名解析的成相应的文件，而是根据resresponse headers里面的内容，<a href="http://tool.oschina.net/commons" target="_blank" rel="external">常见的mini type</a>。例如php输出一张图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$fileres = file_get_contents(&apos;./1.jpg&apos;);</div><div class="line">header(&apos;Content-type: image/jpeg&apos;);</div><div class="line">echo $fileres;</div></pre></td></tr></table></figure><ul><li>不使用插件导出excel文件</li></ul><p>其实这个作用还是挺大的，比如我们经常输出的excel，虽然php有个很强大的插件phpexcel，但是那种东西经常就内存溢出了，我们可以通过修改header，直接输出csv文件，而不用使用任何插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 导出excel(csv)</div><div class="line"> * @data 导出数据</div><div class="line"> * @headlist 第一行,列名</div><div class="line"> * @fileName 输出Excel文件名</div><div class="line"> */</div><div class="line">function csv_export($data = array(), $headlist = array(), $fileName) &#123;</div><div class="line">  </div><div class="line">    header(&apos;Content-Type: application/vnd.ms-excel&apos;);</div><div class="line">    header(&apos;Content-Disposition: attachment;filename=&quot;&apos;.$fileName.&apos;.csv&quot;&apos;);</div><div class="line">    header(&apos;Cache-Control: max-age=0&apos;);</div><div class="line">  </div><div class="line">    //打开PHP文件句柄,php://output 表示直接输出到浏览器</div><div class="line">    $fp = fopen(&apos;php://output&apos;, &apos;a&apos;);</div><div class="line">    </div><div class="line">    //输出Excel列名信息</div><div class="line">    foreach ($headlist as $key =&gt; $value) &#123;</div><div class="line">        //CSV的Excel支持GBK编码，一定要转换，否则乱码</div><div class="line">        $headlist[$key] = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $value);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    //将数据通过fputcsv写到文件句柄</div><div class="line">    fputcsv($fp, $headlist);</div><div class="line">    </div><div class="line">    //计数器</div><div class="line">    $num = 0;</div><div class="line">    </div><div class="line">    //每隔$limit行，刷新一下输出buffer，不要太大，也不要太小</div><div class="line">    $limit = 100000;</div><div class="line">    </div><div class="line">    //逐行取出数据，不浪费内存</div><div class="line">    $count = count($data);</div><div class="line">    for ($i = 0; $i &lt; $count; $i++) &#123;</div><div class="line">    </div><div class="line">        $num++;</div><div class="line">        </div><div class="line">        //刷新一下输出buffer，防止由于数据过多造成问题</div><div class="line">        if ($limit == $num) &#123; </div><div class="line">            ob_flush();</div><div class="line">            flush();</div><div class="line">            $num = 0;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        $row = $data[$i];</div><div class="line">        foreach ($row as $key =&gt; $value) &#123;</div><div class="line">            $row[$key] = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        fputcsv($fp, $row);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><ul><li>文件的上传</li></ul><p>之前在调用datrix的上传接口的时候，他要求传过来的数据文件得是form表单的g格式，可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var writeData = new FormData();</div></pre></td></tr></table></figure><p>3.http是无状态的协议（cookie 和 session）<br>无状态的协议代表我们在登录网站后，浏览器不知道我们在不同的网页间是同一个个体，这就得靠session和cookie了。<br>session和cookie都能保存用户信息，只是一个存储在客户端，另一个存储在服务器端。存储在客户端就说明用户可以进行修改，不安全，所以一般开启session后，服务器返回给用户一个session id,下次用户登录的时候，拿着这个session id 去服务器端获取session文件。<br>php里面默认的cookie 名字是PHPSESSID 里面装的是sessionid的内容(这个名字是可以改的，比如laravel框架里面默认的是laraval<em>session,这个也是可以通过配置文件改的)，只要拿着这个去服务器端sess</em> + sessionid的内容（这个存储地址在php.ini里面有配置），就能找到对应的session，session里面的内容是序列化后的（如果客户端禁止了cookie，也可以把session id 放在url里面带过来）。默认这个session id的cookie是种在 域名下。比如 itbasic.datatom.com,这个域名下的所有网页都可以访问（只有同一个浏览器，如果是不同的浏览器，就获取不到这个cookie了··）</p><p>文件1 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">session_start();</div><div class="line"></div><div class="line">$_SESSION[&apos;username&apos;] = &apos;cy&apos;;</div></pre></td></tr></table></figure></p><p>文件2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">session_start();</div><div class="line">var_dump($_SESSION);</div></pre></td></tr></table></figure></p><p>notice: <strong>这个获取session的时候也要调用session_start（）函数，有时候因为框架的或者函数的封装，很容易忽略</strong></p><p>4.http 状态码<br>http状态码表示这个请求的状态，常用的有200成功 ，3xx 资源的重定向，4xx客户端的错误（404 请求的文件找不到 403 没有权限 401 没有登录）， 5xx服务器端错误（500 经常代码的错误  502 网关，经常nginx出错）。然后现在的restful api在我们返回客户端的请求内容的时候经常也会携带着一个状态码，比如 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">return json_encode([</div><div class="line">      &apos;errorCode&apos;=&gt;10001,</div><div class="line">      &apos;errorMsg&apos;=&gt; &apos;xxx&apos;,</div><div class="line">      &apos;result&apos;=&gt;[]</div><div class="line">])</div></pre></td></tr></table></figure><p>errorCode一般是我们内部定义的错误状态码，可以展示给用户看，让用户更能清楚的了解问题的所在，举个例子就是文章的创建，可能title不合法，过长了，文章删除的时候没有传递id，都可以以一个具体位数开头的错误码，归于一类。<br>不管是http状态码，还是我们传递给用户的状态码，都是可以改变的，比如tp里面的json方法，第一个参数就是http状态码的参数，第二个参数才是要返回的具体的内容。</p><p>location也是返回信息中的一个字段，虽然状态码和我们的返回信息没有关系，即使正常调用接口我们返回一个404也是可以的，但是location必须得配合30x才能实现页面的跳转。</p><p>5.无连接<br>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。记得之前好像看过一篇文章说现在的http协议支持长连接了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connection:keep-alive</div></pre></td></tr></table></figure><p>在请求头里面包括这个东西，虽然自己平时好像从来也没感受到，但还是记录下</p><p>6.url</p><ul><li>url组成</li></ul><p>统一资源定位符。比如<a href="http://itbasic.datatom.com:80。" target="_blank" rel="external">http://itbasic.datatom.com:80。</a><br>http 是网络协议，默认端口80，如果不是80，需手动添加，比如我本地的xampp修改了http默认端口8080，访问的时候itbasic.app:8080才能访问，除了http，还有https 443， ssh默认端口22，访问这些服务的时候都要加上端口号，除了域名之外。其实域名只是为了让人们更好的记住，其实它本质上是翻译成ip的，打开cmd，ping itbasic.datatom.com 就能看到ip地址。ip地址代表服务器，一个服务器上可能提供多种服务，比如web服务，为了识别出不同的服务，我们用端口号进行标识，这和之前说的刚好吻合。</p><ul><li>域名解析</li></ul><p>其实当我们在浏览器中输入itbasic.datatom.com 的时候，浏览器会先去找比如windows host文件（经常我们本地测试的时候，瞎写的域名能访问就是这个道理，他不会去网络上进行解析，而是根据hosts文件中的配置进行ip地址转换，可以测试一下把www.baidu.com ip地址换成itbasic的，当然只有自己这台电脑访问百度会显示的是itbasic的主页），如果找不到，寻找浏览器缓存，再找不到会进行DNS域名解析，最终找到服务器，给他发送http请求，如果是传统的lamp架构，apache接受到请求会把通过模块加载的形式把关于php的内容传递给php进行解析，php会把其中关于数据库的内容，交给数据库处理，返回来的数据处理后统一返回给apache，再返回到浏览器进行渲染。现在lnmp，利用nginx，fpm对php请求进行统一处理，自己关于这方面内容现在还不足，了解还不是很深。</p><ul><li>跨域</li></ul><p>itbasic.datatom.com中 com是一级域名，datatom是二级域名，itbasic是三级域名，同属于datatom,这个二级域名下还会有很多，比如blog.datatom.com,51dan.datatom.com,域名的不同会导致出现跨域的问题，之前看网上处理方式主要分为两大类，一种是jsonp,另一种是返回的请求头中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;</div></pre></td></tr></table></figure><p>7.请求头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /562f25980001b1b106000338.jpg HTTP/1.1</div><div class="line">Host    img.mukewang.com</div><div class="line">User-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</div><div class="line">Accept  image/webp,image/*,*/*;q=0.8</div><div class="line">Referer http://www.imooc.com/</div><div class="line">Accept-Encoding gzip, deflate, sdch</div><div class="line">Accept-Language zh-CN,zh;q=0.8</div></pre></td></tr></table></figure></p><p>第一行get代表请求方式， 后面那个是请求的资源，最后是http的版本号，话说http 1.0 和 http1.1 使用时间好长<br>第二行host 代表主机名<br>第三行 表示 访问的主机的系统，还有浏览器，经常通过这个来判断是手机还是电脑登录。其实这个在服务器端也是可以获取的，通过打印 $_SERVER 数组。<br>第四行<br>第五行 上一个链接地址，经常用来进行回退。<br>这个请求头和后面传递的数据需要空一行。<br>这个请求头里面还可以放置很多别的数据，比如laravel里面表单为了放置csrf攻击，在里面放置了额外的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</div></pre></td></tr></table></figure></p><p>请求的时候建立连接还会有4次握手</p><ol><li>你在吗</li><li>我在</li><li>那我给你发数据了</li><li>好的，你发吧<br>虽然到今天还没用上过</li></ol><p>8.返回信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Fri, 22 May 2009 06:07:21 GMT</div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">      &lt;head&gt;&lt;/head&gt;</div><div class="line">      &lt;body&gt;</div><div class="line">            &lt;!--body goes here--&gt;</div><div class="line">      &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>这个和上面的请求消息差不多，断开链接需要3次握手</p><ol><li>我要断开链接了</li><li>好的 （我不发送数据）</li><li>我也要断开连接了（这下两条都断开了）</li></ol><p>9.https</p><p>https 默认端口443，其实他不是一种新的协议，他还是http协议，只是在外层包裹了ssl。</p><p>https传输数据比http安全大家都知道，但原因呢，是由于数据进行了加密。很早之前有种协议talent，他也是通信协议，默认端口23，但现在这个端口默认都被禁止掉了，原因就是他传输数据的过程是明文传输，导致别人用抓包工具抓到了请求，或者监听这个端口，直接就能获取客户端传递过来的数据。想象一下，钓鱼网站如果用这个，很容易就能获取到用户的密码，太不安全了，于是ssh诞生了（我猜的）。ssh用的地方很多，比如我们用xshell时候建立的连接，还记得我们第一次连接新的服务器的时候的弹窗吗</p><blockquote><p>一次性接受密钥</p></blockquote><p>这是什么东西？这其实就是服务器的公钥。你发给服务器的内容，用服务器的公钥进行加密，服务器接收到你的内容用私钥进行解密，保证了数据传输的安全性（你发送的数据只有服务器能查看到，别人永远不能查看，因为你加密的媒介是计算机的公钥，能解密的只用服务器的私钥，而服务器的私钥只有你自己有，so，数据绝对安全。但有一点，数据的不可变性，就是数据的被篡改性不能得到保证）。或者你是否记得第一次对github进行提交的时候，或者换新的机器对github进行提交的时候，需要在github上贴你的公钥，为什么呢？因为我们git clone代码的时候，需要让github用我们的公钥加密，然后我们用自己的私钥进行解密（git clone 的时候的地址有ssh和https之分）</p><p>上面说的公钥加密，私钥解密舒服非对称加密，记得有RSA算法之类的。但是我们在数据通信的过程中如果一直用非对称方式进行数据传输，消耗会很大。于是我们用了另一种对称加密。对称加密顾名思义就是：同一种密钥进行加密解密，简单。可问题来了，这个密钥如果被获取到，加密就毫无意义了，我们该如何传递这个密钥给客户端。我们不能预先在所有的客户端都放置所有的密钥吧，这样不现实，也不能变动。</p><p>上面说的第一种非对称加密是公钥加密，私钥解密，保证数据的安全性。其实我们还可以通过私钥加密，公钥解密的方式，这样虽然不能保证数据的安全性（指的是被别人获取，因为公钥的公开性），但可以保证数据的不被篡改，因为私钥的私密性，一旦篡改内容，我们没法复原到私钥加密前的状态，我们只需要在私钥加密的内容中添加一些公共的东西，比如一个值，一个算法，这个值经过算法加密后的值，当我们通过公钥解密后这这个值加密后不等于这个算法加密后的值，那我们就能发现文件内容被篡改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周老师让我们写一个关于http的总结，记录下这些天来的自己关于http的认识。&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2018/02/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/27/正则表达式/</id>
    <published>2018-02-27T03:55:54.000Z</published>
    <updated>2018-02-27T10:20:54.004Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记</title>
    <link href="http://yoursite.com/2018/02/22/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/22/python学习笔记/</id>
    <published>2018-02-22T01:52:26.000Z</published>
    <updated>2018-03-05T03:29:53.426Z</updated>
    
    <content type="html"><![CDATA[<p>虽然自己是写php的，但现在python这么热门，而且想挑战一下自己，多学点东西，感觉python的用途非常广泛，反正就是能给自己加分的选项。</p><a id="more"></a><ol><li><p>运行环境<br>python和php一样，也是脚本语言，解释型语言， 翻译一行，执行一行。python运行环境的安装很简单，直接去官网上下载，我是windows，所以下载了合适的exe文件，双击运行就可以了。<br><img src="http://ozys8fka7.bkt.clouddn.com/python%E5%AE%89%E8%A3%85.png" alt="python安装界面"><br>勾选下面的添加到环境变量，直接在cmd中敲击python，就能进入交互界面，这个customize其实就是选择python的安装位置，放在c盘还是哪，别的没有多少变化。<br>想了一下关于php的，其实当时对php的安装理解错了，不管是xampp，还是lamp的编译安装，都是对整个架构lamp的安装，并不单单是php，所以相对而言复杂些。lamp整个架构安装的成功，可以通过浏览器去请求，php进行处理，从数据库中获取数据这些一系列的功能。如果我们单单只是想编译php代码（因为php大部分用来web，所以这种情况比较少，这也是我们一直用集成环境的原因），单单安装php就可以，同样也是去php的官网上下载exe文件。<br>python代码的执行python xx.py,php其实也是类似的，php -c 指定配置文件xx.php,lamp的本质执行php文件就是这样。<br>python，php，bash这些脚本文件还可以直接执行，并不用在前面加上解释器的名字，在文件的开头加上这些注释：#!/usr/bin/env python3，php，bash都可以，加上注释的好处是为了执行的时候的兼容性。<br>别用word和记事本写代码！！！</p></li><li><p>字符编码<br>廖雪峰的教程中提及的字符编码，ascii，utf-8,unicode,这三种，其实理解的并不是很深。后面的bytes类型，并不是很懂。<br>首先是ascii，早些时候，为了表示大小写字母，一些特殊符号，用8位二进制字符表示的东西，其实只有7位在用，最高的一位代表着正负号。<br>后来，为了表示中文，中文这么多汉字，ascii那点数量已经不够用了，出现了GB2312，可是日本韩国那些也出了对应自己文字的标准，为了实现兼容出现了Unicode，可是unicode中每个字符长度一致，导致很浪费，比如A你用一个很长的字符进行编码，后来就出现了针对节约空间的utf-8，字符变长。<br>其实Unicode还有utf-8都是兼容ascii的，对于ascii中已经存在的字符要么是没有变化，要么仅仅就是在前面补位0就可以了。<br><img src="http://ozys8fka7.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E8%BD%AC%E6%8D%A2.png" alt="字符编码关系"></p></li><li><p>重要的数据类型<br>首先是list，这个我得理解就是类似队列一样的东西，在php中可以看做索引数组。<br>初始化  a = [1,2,3,]<br>取元素 a[0]<br>末尾加元素  a.append(6)<br>删除元素  末尾直接删除 a.pop()  返回的是要删除的元素<br>删除特定的元素a.pop（0） 删除第一位元素<br>添加到特定位置元素a.insert(0,88) 在首位添加元素88</p></li></ol><p>tuple 不可变的链表，初始化 a=(0,)<br>注意只有一个元素的时候一定要在末尾加上逗号<br>tuple虽然不可以变化，但是这种（9，[1,2]）=&gt;(9, [2,3]) 还是可以的<br>但这个赋值还不能 a[1] = [2,3] 这种<br>只能a[1][0] = 2这种单独改变<br><img src="http://ozys8fka7.bkt.clouddn.com/tuple%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98.png" alt="tuple的不可变"><br>只是针对第一层结构的不可变</p><p>dict 字典，类似php的关联数组，无序，类似数据结构的链表，查找添加速度元素块，类似字典中查找字的方法。<br>初始化 a =  {2:’222’}<br>获取元素和之前的还是一样 a[2]<br>因为是无序的，所以不能用数字啦<br>添加元素很简单，直接a[‘ll’] = ‘pp’ 这种方式<br>删除元素 a.pop(‘ll’)</p><p>set 集合，就是dict的key部分，so也是无序的<br>初始化 a = set([9,9,9])  感觉是强制转换<br>因为dict的key不能重复，所以上面的初始化后还是 9<br>添加元素 a.add(10)<br>删除元素 a.remove(10)<br>集合··差，并，交</p><p>不可变对象<br>str不可变，tuple不可变</p><p>可变<br>list可变，dict可变</p><p>str的不可变，其实在别的语言中也是，只是廖雪峰的教程中有强调，比如在js教程中，其实php中也是如此，对str本身的改变并不影响str本身，只是返回了一个新的str。<br>还有就是dict的key，必须是不可变对象，否则key的实际值总变换，查询到的value总在变化，那就乱了套了。</p><ol><li>常见的结构<br>if elif else<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mod = 3</div><div class="line"></div><div class="line">if mod == 1:</div><div class="line">    print(&apos;cy is good&apos;)</div><div class="line">elif mod == 2:</div><div class="line">    print(&apos;cy is bad&apos;)</div><div class="line">else:</div><div class="line">    print(&apos;ccc&apos;)</div></pre></td></tr></table></figure></li></ol><p>感觉写python就不要在末尾加 ;<br>判断条件可以是表达式，不要加括号<br>注意条件语句末尾加：<br>用缩进代替 {}</p><p>for in 进行循环遍历<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = &#123;&apos;pp&apos;: &apos;oo&apos;, &apos;rr&apos;: &apos;pppp&apos;&#125;</div><div class="line">for x in a:</div><div class="line">    print(x)</div></pre></td></tr></table></figure></p><p>函数的定义<br>def print_function(a):<br>      for key,value in a.items():<br>            print(a+’–’+value)</p><p>类的定义<br>class  ClassName(object):</p><ol><li>零碎的知识点</li></ol><ul><li>python中的注释，单行是 #，多行是 ``` ``` </li><li>python的代码不能压缩，因为if 后面的空格是必须的，压缩之后就没有当初的意义了</li><li>python里面的if 表达式好像不用用括号包围起来，然后表达式不能用赋值语句，感觉这些虽然在别的语言里面可以用，但是本质上用这个不规范，感觉还是不用比较好</li><li>python里面变量的命名用驼峰法，然后如果变量位于模块里面而不是类下面，会被直接认为是常量</li><li>python的代码规范是pylint，要求python代码结尾需要一个空行</li><li>除了：，剩下的运算符两边好像都需要空格，python文件的开头（模块的开头），一般都有个doc文档描述</li><li>python的缩进是4个空格</li><li>感觉逻辑运算符应该就是 and or这种， 但是 &amp;和|挺方便所以用的比较多，所以以后感觉python中还是多使用 and 和 or比较好</li><li>python中没有我们那种for（） 循环，只有一种循环就是for in，如果想用数字那种控制循环条件，可以通过range构造一个类似list的东西，rang（start, end, step）,包括开始，不包括结束，最后一个参数代表每步的大小，python中还有个切片，功能一致。a = [0:len(b):2],只是这个输出的直接是一个list</li><li>python中的组织结构：包（文件夹）模块（文件）类，虽然python中一个模块可以包括多个类，但是最好还是只包括一个，这样更符合规范</li><li>python中除了类名，首字母大写，后面用驼峰法，好像剩下的所有的都用_ 进行分割</li><li>包在外表物理形式上是类似于文件夹的，但是文件夹并不一定是包，要想成为包，必须的有个<strong>init.py</strong> 这个文件夹（里面的内容是空的，可以随便写，现在我还不知道他有什么用）</li><li>导入包邮两种形式  import a , from a import hello，hello2, hello3,第一种在使用变量的时候需要加上包的名称，第二种在使用的时候直接使用hello就可以了(连着导入了三个变量)</li><li>__pycache__ 二进制文件夹，感觉应该是缓存文件，可以 加速python的编译执行,这个文件夹里面的内容是没有用的</li><li>import 包名的时候也可以用 as，用来简化包名</li><li>不管是导入包，还是导入包下面的文件 <strong>init.py</strong> 都会被自动的执行</li><li>几个比较常见的内置变量<br><strong>doc</strong>: 文件的注释<br><strong>file</strong> : 文件的物理位置<br><strong>package</strong>: 代表文件的包名，文件外层文件夹的名称<br><strong>name</strong>:代表文件的名称，没有后缀</li><li>python可以同时返回多个值，return a,b ，其实这是返回一个tuple，感觉是不是tuple可以不用（）包裹起来 a,b,c = (1,23,3) 这样赋值了，php也有类似的功能。list(a,b) = [0,1],只能用于索引数组</li><li>python 中字符串的连接用的是 +， python中函数的调用参数可以不按照顺序返回，只需指定变量名就可以了</li><li>python中的可变参数，比如print可以接受任意多个参数。def print_function(<em>param),这样打印出来的param是一个tuple，如果print_function(</em>(1,2,3)), 这样打印出来的依旧是tuple，但是如果直接print_function((1,2,3)),这样打印出来的就是二维数组了(不止是tuple，list这些也是可以的)</li><li>作用域：python中for和php，js都一样，构成不了作用域，es6里面用的let。import代码的时候其实是把不同的代码拼装在了一起，import的文件里面如果有可执行的内容，都是会被执行的</li><li>函数内部的变量本来是不能被执行的，但是如果在函数内部定义了global c.单独起一行，这样就能在函数外面也可以使用</li><li>php类里面的定义没有参数（），python里面类的定义有（）</li><li>类中方法的定义一定要传入参数，self</li><li><strong>init</strong> 是类的构造方法，也要传入参数self感觉self在python类中属于实例。self.name  代表这个类的实例属性，即使这个类没有类变量name也没有关系（注意这个self只是一个变量的名称，是可以改变的，不属于关键字范畴）</li><li>python中类Test().name 可以直接调用类属性</li><li>上面这种直接使用类变量一般用在类的外部，如果在类的内部使用，一般是不可以的，如果实在想使用，用self.<strong>class</strong>.name  这样使用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然自己是写php的，但现在python这么热门，而且想挑战一下自己，多学点东西，感觉python的用途非常广泛，反正就是能给自己加分的选项。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
